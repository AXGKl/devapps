{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"devapps \u00a4 This is an enabler repo to develop \"ops friendly\" apps in a normalized way, incl: logging ( structlog ) cli flags handling ( abseil , with addons) docu ( mkdocs-material ) project setup (test) resoures management, including daemons and container filesystem layers and more. Last modified: Tue, 25 Jul 2023 16h GMT General Questions and Feature Requests var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','AXGKl/devapps'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Overview"},{"location":"#devapps","text":"This is an enabler repo to develop \"ops friendly\" apps in a normalized way, incl: logging ( structlog ) cli flags handling ( abseil , with addons) docu ( mkdocs-material ) project setup (test) resoures management, including daemons and container filesystem layers and more. Last modified: Tue, 25 Jul 2023 16h GMT General Questions and Feature Requests var scr = document.createElement('script'); scr.setAttribute('src','https://utteranc.es/client.js'); scr.setAttribute('repo','AXGKl/devapps'); scr.setAttribute('issue-term','pathname'); scr.setAttribute('theme','github-dark'); scr.setAttribute('crossorigin','anonymous'); document.getElementById('utterance_comments').appendChild(scr); .utterances {max-width: 100% !important} typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"devapps"},{"location":"about/changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog . This project adheres to CalVer Versioning . 2021.8.1 \u00a4 Compare with 2021.5.10 Bug Fixes \u00a4 Element tree in 3.9 no getchildren anymore. ( 4cb2506 by Gunther Klessinger). Better fsbuild ( e806498 by Gunther Klessinger). Removed cached termwidth, is now fast ( f526a2d by Gunther Klessinger). Features \u00a4 Default action ( 4a98d13 by Gunther Klessinger). Actions support on cli ( 6a7cb03 by Gunther Klessinger). 2021.5.10 \u00a4 Compare with first commit Features \u00a4 First commit ( dfa77dc by Gunther Klessinger). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Changelog"},{"location":"about/changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog . This project adheres to CalVer Versioning .","title":"Changelog"},{"location":"about/changelog/#202181","text":"Compare with 2021.5.10","title":"2021.8.1"},{"location":"about/changelog/#bug-fixes","text":"Element tree in 3.9 no getchildren anymore. ( 4cb2506 by Gunther Klessinger). Better fsbuild ( e806498 by Gunther Klessinger). Removed cached termwidth, is now fast ( f526a2d by Gunther Klessinger).","title":"Bug Fixes"},{"location":"about/changelog/#features","text":"Default action ( 4a98d13 by Gunther Klessinger). Actions support on cli ( 6a7cb03 by Gunther Klessinger).","title":"Features"},{"location":"about/changelog/#2021510","text":"Compare with first commit","title":"2021.5.10"},{"location":"about/changelog/#features_1","text":"First commit ( dfa77dc by Gunther Klessinger). typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Features"},{"location":"about/contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Tasks \u00a4 This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"about/contributing/#tasks","text":"This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"about/contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"about/contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"about/contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Pull requests guidelines"},{"location":"about/credits/","text":"Credits \u00a4 Listed below all the python dependencies of devapps Run Dependencies \u00a4 Package Description Version License absl-py Abseil Python Common Libraries, see https://github.com/abseil/abseil-py . 0.13.0 Apache 2.0 bpytop Resource monitor that shows usage and stats for processor, memory, disks, network and processes. 1.0.67 Apache-2.0 decorator Decorators for Humans 5.0.9 new BSD gevent Coroutine-based network library 21.1.2 MIT httpx The next generation HTTP client. 0.17.1 BSD humanize Python humanize utilities 3.10.0 MIT inflection A port of Ruby on Rails inflector to Python 0.5.1 MIT jsondiff Diff JSON and JSON-like structures in Python 1.3.0 n.a. lz4 LZ4 Bindings for Python 3.1.3 n.a. msgpack MessagePack (de)serializer. 1.0.2 Apache 2.0 psutil Cross-platform lib for process and system monitoring in Python. 5.8.0 BSD pycond Lightweight Condition Parsing and Building of Evaluation Expressions 20210221 BSD Pygments Pygments is a syntax highlighting package written in Python. 2.9.0 BSD PyJWT JSON Web Token implementation in Python 2.1.0 MIT PyYAML YAML parser and emitter for Python 5.4.1 MIT requests Python HTTP for Humans. 2.26.0 Apache 2.0 Rx Reactive Extensions (Rx) for Python 3.2.0 MIT snoop Powerful debugging tools for Python 0.4.0 MIT structlog Structured Logging for Python 21.1.0 MIT or Apache , 2.0 tabulate Pretty-print tabular data 0.8.9 MIT toml Python Library for Tom's Obvious, Minimal Language 0.10.2 MIT ujson Ultra fast JSON encoder and decoder for Python 4.0.2 n.a. Dev Dependencies \u00a4 Package Description Version License autoflake Removes unused imports and unused variables 1.4 Expat axblack The uncompromising code formatter - with single quotes as default. 20201010 MIT black The uncompromising code formatter. 18.6b4 MIT docutools Documentation Tools for the Devapp Framework 2021.7.31 BSD 2-Clause Simplified duty A simple task runner. 0.5.0 ISC flake8-black flake8 plugin to call black as a code style validator 0.2.3 MIT flake8-builtins Check for python builtins being used as variables or parameters. 1.5.3 GPL 2 flake8-pytest-style A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. 1.5.0 MIT flake8-tidy-imports A flake8 plugin that helps you write tidier imports. 4.3.0 MIT flake8-variables-names A flake8 extension that helps to make more readable variables names 0.0.3 MIT flakehell Flake8 wrapper to make it nice and configurable 0.6.1 n.a. git-changelog Automatic Changelog generator using Jinja2 templates. 0.4.2 ISC ipython IPython: Productive Interactive Computing 7.26.0 BSD isort A Python utility / library to sort Python imports. 4.3.21 MIT jinja2-cli A CLI interface to Jinja2 0.7.0 BSD markdown-include This is an extension to Python-Markdown which provides an \"include\" function, similar to that found in LaTeX (and also the C pre-processor and Fortran). I originally wrote it for my FORD Fortran auto-documentation generator. 0.6.0 n.a. mkdocs Project documentation with Markdown. 1.2.2 BSD mkdocs-material A Material Design theme for MkDocs 6.2.8 MIT mkdocstrings Automatic documentation from sources, for MkDocs. 0.13.6 ISC mypy Optional static typing for Python 0.782 MIT pytest pytest: simple powerful testing with Python 6.2.4 MIT pytest-cov Pytest plugin for measuring coverage. 2.12.1 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. 3.8.0 MIT pytest-sugar pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). 0.9.4 BSD pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes 2.3.0 MIT Indirect Dependencies \u00a4 Package Description Version License ansimarkup Produce colored terminal text with an xml-like markup failprint 1.5.0 Revised BSD anybadge Simple, flexible badge generator for project badges. docutools 1.7.0 n.a. appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". axblack black 1.4.4 MIT appnope Disable App Nap on macOS >= 10.9 ipython 0.1.2 BSD astroid An abstract syntax tree for Python with inference support. pylint 2.6.5 LGPL-2.1-or-later asttokens Annotate AST trees with source code positions snoop 2.0.5 Apache 2.0 atomicwrites Atomic file writes. pytest 1.4.0 MIT attrs Classes Without Boilerplate axblack black pytest 21.2.0 MIT backcall Specifications for callback functions passed in to an API ipython 0.2.0 n.a. beautifulsoup4 Screen-scraping library mkdocstrings 4.9.3 MIT certifi Python package for providing Mozilla's CA Bundle. httpx requests 2021.5.30 MPL-2.0 cffi Foreign Function Interface for Python calling C code. gevent 1.14.6 MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. requests 2.0.4 MIT cheap-repr Better version of repr/reprlib for short, cheap string representations. 0.4.6 MIT click Composable command line interface toolkit axblack black mkdocs 8.0.1 BSD-3-Clause colorama Cross-platform colored terminal text. ansimarkup click flakehell ipython pylint pytest 0.4.4 BSD coverage Code coverage measurement for Python pytest-cov 5.5 Apache 2.0 entrypoints Discover and load entry points from installed packages. flakehell 0.3 n.a. execnet execnet: rapid multi-Python deployment pytest-xdist 1.9.0 MIT executing Get the currently executing AST node of a frame, and other information snoop 0.8.0 MIT failprint Run a command, print its output only if it fails. duty 0.6.2 ISC flake8 the modular source code checker: pep8 pyflakes and co flake8-black flake8-builtins flake8-tidy-imports flakehell 3.9.2 MIT flake8-plugin-utils The package provides base classes and utils for flake8 plugin writing flake8-pytest-style 1.3.2 MIT ghp-import Copy your docs directly to the gh-pages branch. mkdocs 2.0.1 Apache Software greenlet Lightweight in-process concurrent programming gevent 1.1.0 MIT h11 A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 httpcore 0.12.0 MIT httpcore A minimal low-level HTTP client. httpx 0.12.3 BSD httplib2 A comprehensive HTTP client library. plantuml 0.19.1 MIT idna Internationalized Domain Names in Applications (IDNA) requests rfc3986 3.2 BSD-3-Clause importlib-metadata Read metadata from Python packages click flake8 flake8-tidy-imports Markdown mkdocs pluggy pytest pytest-randomly 4.6.3 n.a. iniconfig iniconfig: brain-dead simple config-ini parsing pytest 1.1.1 MIT ipython-genutils Vestigial utilities from IPython traitlets 0.2.0 BSD jedi An autocompletion tool for Python that can be used for text editors. ipython 0.18.0 MIT Jinja2 A very fast and expressive template engine. failprint jinja2-cli mkdocs-macros-plugin 2.11.3 BSD-3-Clause lazy-object-proxy A fast and thorough lazy object proxy. astroid 1.6.0 BSD-2-Clause Markdown Python implementation of Markdown. markdown-include mkdocs-material 3.3.4 BSD MarkupSafe Safely add untrusted strings to HTML/XML markup. 2.0.1 BSD-3-Clause matplotlib-inline Inline Matplotlib backend for Jupyter ipython 0.1.2 BSD 3-Clause mccabe McCabe checker, plugin for flake8 flake8 pylint 0.6.1 Expat mergedeep A deep merge function for \ud83d\udc0d. mkdocs 1.3.4 n.a. mkdocs-exclude A mkdocs plugin that lets you exclude files or trees. docutools 1.0.2 Apache mkdocs-macros-plugin Unleash the power of MkDocs with macros and variables docutools 0.5.12 MIT mkdocs-material-extensions Extension pack for Python Markdown. mkdocs-material 1.0.1 MIT mkdocs-pymdownx-material-extras Plugin to extend MkDocs Material theme. docutools 1.4 MIT mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. axblack mypy 0.4.3 MIT packaging Core utilities for Python packages mkdocs pytest pytest-sugar 21.0 BSD-2-Clause or Apache-2.0 parso A Python Parser jedi 0.8.2 MIT pathspec Utility library for gitignore style pattern matching of file paths. axblack 0.9.0 MPL 2.0 pexpect Pexpect allows easy control of interactive console applications. ipython 4.8.0 ISC pickleshare Tiny 'shelve'-like database with concurrency support ipython 0.7.5 MIT plantuml UNKNOWN plantuml-markdown 0.3.0 BSD plantuml-markdown A PlantUML plugin for Markdown docutools 3.4.2 n.a. pluggy plugin and hook calling mechanisms for python pytest 0.13.1 MIT prompt-toolkit Library for building powerful interactive command lines in Python ipython 3.0.19 n.a. ptyprocess Run a subprocess in a pseudo terminal failprint pexpect 0.6.0 n.a. py library with cross-python path, ini-parsing, io, code, log facilities pytest pytest-forked 1.10.0 MIT pycodestyle Python style guide checker flake8 2.7.0 Expat pycparser C parser in Python cffi 2.20 BSD pyflakes passive checker of Python programs autoflake flake8 2.3.1 MIT pylint python code static checker flakehell 2.9.6 GPL-2.0-or-later pymdown-extensions Extension pack for Python Markdown. mkdocs-material mkdocstrings 8.2 MIT pyparsing Python parsing module httplib2 packaging 2.4.7 MIT pytest-forked run tests in isolated forked subprocesses pytest-xdist 1.3.0 MIT python-dateutil Extensions to the standard Python datetime module ghp-import mkdocs-macros-plugin 2.8.2 Dual pytkdocs Load Python objects documentation. mkdocstrings 0.9.0 ISC pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. mkdocs 0.1 n.a. regex Alternative regular expression module, to replace re. axblack 2021.7.6 Apache Software rfc3986 Validating URI References per RFC 3986 httpx 1.5.0 Apache 2.0 six Python 2 and 3 compatibility utilities absl-py asttokens python-dateutil snoop 1.16.0 MIT sniffio Sniff out which async library your code is running under httpcore httpx 1.2.0 MIT -or- Apache 2.0 soupsieve A modern CSS selector implementation for Beautiful Soup. beautifulsoup4 2.2.1 MIT termcolor ANSII Color formatting for output in terminal. mkdocs-macros-plugin pytest-sugar 1.1.0 MIT traitlets Traitlets Python configuration system ipython matplotlib-inline 5.0.5 BSD typed-ast a fork of Python 2 and 3 ast modules with type comment support astroid axblack mypy 1.4.3 Apache 2.0 typing-extensions Backported and Experimental Type Hints for Python 3.5+ astroid axblack importlib-metadata mypy structlog 3.10.0.0 PSF urllib3 HTTP library with thread-safe connection pooling, file post, and more. flakehell requests 1.26.6 MIT watchdog Filesystem events monitoring mkdocs 2.1.3 Apache 2.0 wcwidth Measures the displayed width of unicode strings in a terminal prompt-toolkit 0.2.5 MIT wrapt Module for decorators, wrappers and monkey patching. astroid 1.12.1 BSD zipp Backport of pathlib-compatible object wrapper for zip files importlib-metadata 3.5.0 n.a. zope.event Very basic event publishing system gevent 4.5.0 ZPL 2.1 zope.interface Interfaces for Python gevent 5.4.0 ZPL 2.1 These projects were used to build devapps python | poetry | copier-poetry Many thanks to all authors, for all these brilliant software packages! typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Credits"},{"location":"about/credits/#credits","text":"Listed below all the python dependencies of devapps","title":"Credits"},{"location":"about/credits/#run-dependencies","text":"Package Description Version License absl-py Abseil Python Common Libraries, see https://github.com/abseil/abseil-py . 0.13.0 Apache 2.0 bpytop Resource monitor that shows usage and stats for processor, memory, disks, network and processes. 1.0.67 Apache-2.0 decorator Decorators for Humans 5.0.9 new BSD gevent Coroutine-based network library 21.1.2 MIT httpx The next generation HTTP client. 0.17.1 BSD humanize Python humanize utilities 3.10.0 MIT inflection A port of Ruby on Rails inflector to Python 0.5.1 MIT jsondiff Diff JSON and JSON-like structures in Python 1.3.0 n.a. lz4 LZ4 Bindings for Python 3.1.3 n.a. msgpack MessagePack (de)serializer. 1.0.2 Apache 2.0 psutil Cross-platform lib for process and system monitoring in Python. 5.8.0 BSD pycond Lightweight Condition Parsing and Building of Evaluation Expressions 20210221 BSD Pygments Pygments is a syntax highlighting package written in Python. 2.9.0 BSD PyJWT JSON Web Token implementation in Python 2.1.0 MIT PyYAML YAML parser and emitter for Python 5.4.1 MIT requests Python HTTP for Humans. 2.26.0 Apache 2.0 Rx Reactive Extensions (Rx) for Python 3.2.0 MIT snoop Powerful debugging tools for Python 0.4.0 MIT structlog Structured Logging for Python 21.1.0 MIT or Apache , 2.0 tabulate Pretty-print tabular data 0.8.9 MIT toml Python Library for Tom's Obvious, Minimal Language 0.10.2 MIT ujson Ultra fast JSON encoder and decoder for Python 4.0.2 n.a.","title":"Run Dependencies"},{"location":"about/credits/#dev-dependencies","text":"Package Description Version License autoflake Removes unused imports and unused variables 1.4 Expat axblack The uncompromising code formatter - with single quotes as default. 20201010 MIT black The uncompromising code formatter. 18.6b4 MIT docutools Documentation Tools for the Devapp Framework 2021.7.31 BSD 2-Clause Simplified duty A simple task runner. 0.5.0 ISC flake8-black flake8 plugin to call black as a code style validator 0.2.3 MIT flake8-builtins Check for python builtins being used as variables or parameters. 1.5.3 GPL 2 flake8-pytest-style A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. 1.5.0 MIT flake8-tidy-imports A flake8 plugin that helps you write tidier imports. 4.3.0 MIT flake8-variables-names A flake8 extension that helps to make more readable variables names 0.0.3 MIT flakehell Flake8 wrapper to make it nice and configurable 0.6.1 n.a. git-changelog Automatic Changelog generator using Jinja2 templates. 0.4.2 ISC ipython IPython: Productive Interactive Computing 7.26.0 BSD isort A Python utility / library to sort Python imports. 4.3.21 MIT jinja2-cli A CLI interface to Jinja2 0.7.0 BSD markdown-include This is an extension to Python-Markdown which provides an \"include\" function, similar to that found in LaTeX (and also the C pre-processor and Fortran). I originally wrote it for my FORD Fortran auto-documentation generator. 0.6.0 n.a. mkdocs Project documentation with Markdown. 1.2.2 BSD mkdocs-material A Material Design theme for MkDocs 6.2.8 MIT mkdocstrings Automatic documentation from sources, for MkDocs. 0.13.6 ISC mypy Optional static typing for Python 0.782 MIT pytest pytest: simple powerful testing with Python 6.2.4 MIT pytest-cov Pytest plugin for measuring coverage. 2.12.1 MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. 3.8.0 MIT pytest-sugar pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). 0.9.4 BSD pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes 2.3.0 MIT","title":"Dev  Dependencies"},{"location":"about/credits/#indirect-dependencies","text":"Package Description Version License ansimarkup Produce colored terminal text with an xml-like markup failprint 1.5.0 Revised BSD anybadge Simple, flexible badge generator for project badges. docutools 1.7.0 n.a. appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". axblack black 1.4.4 MIT appnope Disable App Nap on macOS >= 10.9 ipython 0.1.2 BSD astroid An abstract syntax tree for Python with inference support. pylint 2.6.5 LGPL-2.1-or-later asttokens Annotate AST trees with source code positions snoop 2.0.5 Apache 2.0 atomicwrites Atomic file writes. pytest 1.4.0 MIT attrs Classes Without Boilerplate axblack black pytest 21.2.0 MIT backcall Specifications for callback functions passed in to an API ipython 0.2.0 n.a. beautifulsoup4 Screen-scraping library mkdocstrings 4.9.3 MIT certifi Python package for providing Mozilla's CA Bundle. httpx requests 2021.5.30 MPL-2.0 cffi Foreign Function Interface for Python calling C code. gevent 1.14.6 MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. requests 2.0.4 MIT cheap-repr Better version of repr/reprlib for short, cheap string representations. 0.4.6 MIT click Composable command line interface toolkit axblack black mkdocs 8.0.1 BSD-3-Clause colorama Cross-platform colored terminal text. ansimarkup click flakehell ipython pylint pytest 0.4.4 BSD coverage Code coverage measurement for Python pytest-cov 5.5 Apache 2.0 entrypoints Discover and load entry points from installed packages. flakehell 0.3 n.a. execnet execnet: rapid multi-Python deployment pytest-xdist 1.9.0 MIT executing Get the currently executing AST node of a frame, and other information snoop 0.8.0 MIT failprint Run a command, print its output only if it fails. duty 0.6.2 ISC flake8 the modular source code checker: pep8 pyflakes and co flake8-black flake8-builtins flake8-tidy-imports flakehell 3.9.2 MIT flake8-plugin-utils The package provides base classes and utils for flake8 plugin writing flake8-pytest-style 1.3.2 MIT ghp-import Copy your docs directly to the gh-pages branch. mkdocs 2.0.1 Apache Software greenlet Lightweight in-process concurrent programming gevent 1.1.0 MIT h11 A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 httpcore 0.12.0 MIT httpcore A minimal low-level HTTP client. httpx 0.12.3 BSD httplib2 A comprehensive HTTP client library. plantuml 0.19.1 MIT idna Internationalized Domain Names in Applications (IDNA) requests rfc3986 3.2 BSD-3-Clause importlib-metadata Read metadata from Python packages click flake8 flake8-tidy-imports Markdown mkdocs pluggy pytest pytest-randomly 4.6.3 n.a. iniconfig iniconfig: brain-dead simple config-ini parsing pytest 1.1.1 MIT ipython-genutils Vestigial utilities from IPython traitlets 0.2.0 BSD jedi An autocompletion tool for Python that can be used for text editors. ipython 0.18.0 MIT Jinja2 A very fast and expressive template engine. failprint jinja2-cli mkdocs-macros-plugin 2.11.3 BSD-3-Clause lazy-object-proxy A fast and thorough lazy object proxy. astroid 1.6.0 BSD-2-Clause Markdown Python implementation of Markdown. markdown-include mkdocs-material 3.3.4 BSD MarkupSafe Safely add untrusted strings to HTML/XML markup. 2.0.1 BSD-3-Clause matplotlib-inline Inline Matplotlib backend for Jupyter ipython 0.1.2 BSD 3-Clause mccabe McCabe checker, plugin for flake8 flake8 pylint 0.6.1 Expat mergedeep A deep merge function for \ud83d\udc0d. mkdocs 1.3.4 n.a. mkdocs-exclude A mkdocs plugin that lets you exclude files or trees. docutools 1.0.2 Apache mkdocs-macros-plugin Unleash the power of MkDocs with macros and variables docutools 0.5.12 MIT mkdocs-material-extensions Extension pack for Python Markdown. mkdocs-material 1.0.1 MIT mkdocs-pymdownx-material-extras Plugin to extend MkDocs Material theme. docutools 1.4 MIT mypy-extensions Experimental type system extensions for programs checked with the mypy typechecker. axblack mypy 0.4.3 MIT packaging Core utilities for Python packages mkdocs pytest pytest-sugar 21.0 BSD-2-Clause or Apache-2.0 parso A Python Parser jedi 0.8.2 MIT pathspec Utility library for gitignore style pattern matching of file paths. axblack 0.9.0 MPL 2.0 pexpect Pexpect allows easy control of interactive console applications. ipython 4.8.0 ISC pickleshare Tiny 'shelve'-like database with concurrency support ipython 0.7.5 MIT plantuml UNKNOWN plantuml-markdown 0.3.0 BSD plantuml-markdown A PlantUML plugin for Markdown docutools 3.4.2 n.a. pluggy plugin and hook calling mechanisms for python pytest 0.13.1 MIT prompt-toolkit Library for building powerful interactive command lines in Python ipython 3.0.19 n.a. ptyprocess Run a subprocess in a pseudo terminal failprint pexpect 0.6.0 n.a. py library with cross-python path, ini-parsing, io, code, log facilities pytest pytest-forked 1.10.0 MIT pycodestyle Python style guide checker flake8 2.7.0 Expat pycparser C parser in Python cffi 2.20 BSD pyflakes passive checker of Python programs autoflake flake8 2.3.1 MIT pylint python code static checker flakehell 2.9.6 GPL-2.0-or-later pymdown-extensions Extension pack for Python Markdown. mkdocs-material mkdocstrings 8.2 MIT pyparsing Python parsing module httplib2 packaging 2.4.7 MIT pytest-forked run tests in isolated forked subprocesses pytest-xdist 1.3.0 MIT python-dateutil Extensions to the standard Python datetime module ghp-import mkdocs-macros-plugin 2.8.2 Dual pytkdocs Load Python objects documentation. mkdocstrings 0.9.0 ISC pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. mkdocs 0.1 n.a. regex Alternative regular expression module, to replace re. axblack 2021.7.6 Apache Software rfc3986 Validating URI References per RFC 3986 httpx 1.5.0 Apache 2.0 six Python 2 and 3 compatibility utilities absl-py asttokens python-dateutil snoop 1.16.0 MIT sniffio Sniff out which async library your code is running under httpcore httpx 1.2.0 MIT -or- Apache 2.0 soupsieve A modern CSS selector implementation for Beautiful Soup. beautifulsoup4 2.2.1 MIT termcolor ANSII Color formatting for output in terminal. mkdocs-macros-plugin pytest-sugar 1.1.0 MIT traitlets Traitlets Python configuration system ipython matplotlib-inline 5.0.5 BSD typed-ast a fork of Python 2 and 3 ast modules with type comment support astroid axblack mypy 1.4.3 Apache 2.0 typing-extensions Backported and Experimental Type Hints for Python 3.5+ astroid axblack importlib-metadata mypy structlog 3.10.0.0 PSF urllib3 HTTP library with thread-safe connection pooling, file post, and more. flakehell requests 1.26.6 MIT watchdog Filesystem events monitoring mkdocs 2.1.3 Apache 2.0 wcwidth Measures the displayed width of unicode strings in a terminal prompt-toolkit 0.2.5 MIT wrapt Module for decorators, wrappers and monkey patching. astroid 1.12.1 BSD zipp Backport of pathlib-compatible object wrapper for zip files importlib-metadata 3.5.0 n.a. zope.event Very basic event publishing system gevent 4.5.0 ZPL 2.1 zope.interface Interfaces for Python gevent 5.4.0 ZPL 2.1 These projects were used to build devapps python | poetry | copier-poetry Many thanks to all authors, for all these brilliant software packages! typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Indirect Dependencies"},{"location":"about/todo/","text":"Not Yet Documented \u00a4 Basically all. => Do it. async model (how to bypass gevent in an app see mkdocsstr) flags /env overrides / pytest typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"TODO"},{"location":"about/todo/#not-yet-documented","text":"Basically all. => Do it. async model (how to bypass gevent in an app see mkdocsstr) flags /env overrides / pytest typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Not Yet Documented"},{"location":"arch/project/","text":"Creating Products and Projects Using Devapps \u00a4 Build tool is poetry Scaffolding \u00a4 We offer a product scaffolding set of templates, installing the basic layout of a devapps project: Install copier . Clone https://github.com/pawamoy/copier-poetry.git to get the templates. Run copier copier-poetry <your new product (or project)> Adapt the files to your liking Note In contrast to other scaffolding tools like cookiecutter copier does allow updates, when the templates update. Makefile \u00a4 The makefile allows various dev related actions. For most actions it calls duties.py , which uses poetry to run actions. make setup installs a virtual environment, based on your pyproject.toml . Products involving Node-RED \u00a4 Instead of raw devapps configure lc-python as main dependency within your pyproject.toml. It comes additionally with python and javascript modules and tools for handling Nodejs / Node-RED. Developping on Many Repos Concurrently \u00a4 A devapps project or product repo may directly or indirectly depend on other repos of the devapps familiy. lc-doctools : (Auto-)documentation building tools devapps : This repo lc-python : For Python reference implementation of Node-RED based data pipeline building. Plus, on a project, your product devapps base repo. In order to develop on many of them we recommend using PYTHONPATH like shown for the lc-diameter product: $ alias lcd alias lcd='r=\"$HOME/repos\"; export PYTHONPATH=\"$r/devapps/src:$r/lc-doctools/src:$r/lc-python/src\"; cd \"$r/lc-diameter\"; poetry shell' Now we can develop on any of the involved repos while also working on lc-diameter. Once all tests are running we create new package versions and bump the version number in pyproject.toml . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Creating Products and Projects Using Devapps"},{"location":"arch/project/#creating-products-and-projects-using-devapps","text":"Build tool is poetry","title":"Creating Products and Projects Using Devapps"},{"location":"arch/project/#scaffolding","text":"We offer a product scaffolding set of templates, installing the basic layout of a devapps project: Install copier . Clone https://github.com/pawamoy/copier-poetry.git to get the templates. Run copier copier-poetry <your new product (or project)> Adapt the files to your liking Note In contrast to other scaffolding tools like cookiecutter copier does allow updates, when the templates update.","title":"Scaffolding"},{"location":"arch/project/#makefile","text":"The makefile allows various dev related actions. For most actions it calls duties.py , which uses poetry to run actions. make setup installs a virtual environment, based on your pyproject.toml .","title":"Makefile"},{"location":"arch/project/#products-involving-node-red","text":"Instead of raw devapps configure lc-python as main dependency within your pyproject.toml. It comes additionally with python and javascript modules and tools for handling Nodejs / Node-RED.","title":"Products involving Node-RED"},{"location":"arch/project/#developping-on-many-repos-concurrently","text":"A devapps project or product repo may directly or indirectly depend on other repos of the devapps familiy. lc-doctools : (Auto-)documentation building tools devapps : This repo lc-python : For Python reference implementation of Node-RED based data pipeline building. Plus, on a project, your product devapps base repo. In order to develop on many of them we recommend using PYTHONPATH like shown for the lc-diameter product: $ alias lcd alias lcd='r=\"$HOME/repos\"; export PYTHONPATH=\"$r/devapps/src:$r/lc-doctools/src:$r/lc-python/src\"; cd \"$r/lc-diameter\"; poetry shell' Now we can develop on any of the involved repos while also working on lc-diameter. Once all tests are running we create new package versions and bump the version number in pyproject.toml . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Developping on Many Repos Concurrently"},{"location":"dev/flags/","text":"The CLI Flag System \u00a4 devapps uses absl flags to get configured via the CLI or environ. Application modules and packages define the flags they require or support within their source code themselves. Dependent on which of these modules are imported at a certain time after startup (before the call to app.run ), then these are the flags presented to the user when he calls -h|--help|--helpful|-hf . Set flag values are then globals throughout the application. This makes a lot of sense when a package has a lot of varying use cases, with certain modules sometimes needed or not. Note It is allowed to do FLG.foo=bar after startup - but considered bad practice. Flag Definitions via Nested Class Trees \u00a4 In devapps, while fully supporting the standard absl mechanics ( flags.DEFINE_string ) we also allow to defined them in class name spaces: These are e.g. the flags of the project module: from devapp.app import FLG , app , run_app , do , system class Flags : # short codes built dynamically (conflict resolved) for all flags: autoshort = '' # You could give a short code prefix here # flag name: class force : # CLI help string: n = 'Assume y on all questions. Required when started w/o a tty' d = False # default class init_at : n = 'Set up project in given directory. env vars / relative dirs supported.' d = '' class init_create_unit_files : n = 'List service unit files you want to have created for systemctl --user' d = [] class init_resource_match : n = 'Install only matching resources. Example: -irm \"redis, hub\"' d = [] class list_resources_files : n = 'Show available definition files.' d = False class edit_matching_resource_file : n = 'Open resource files in $EDITOR, matching given string in their content' d = '' ( ... ) def run (): if FLG . init_at : # structlog call: app . info ( 'Re-initializing project' , location = FLG . init_at ) ( ... ) # if flags argument to run_app is given it will implicitly call devapp.tools.define_flags: main = lambda : run_app ( run , flags = Flags ) Full Control module import does not cause flags already to be defined, the parent class is just a namespace without any magic. Instead there is special call devapp.tools.define_flags(my_flags_class) , which calls absl.define_<type> for any of the inner classes. Handing the flags via the flags argument into run_app will issue that call. A call to help then lists the flags on the CLI: -h : Module Help This lists the supported flags for the module whose main method is called: $ ops project -h \u001b[1;38;5;11mCreating A Project With Resources \u001b[1;38;5;11m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[0m This plugin is helper for creating a project directory, incl. required local resources. Your system remains unchanged, except <project_dir> and <conda_prefix>. \u001b[0m It provides an \u001b[0;38;5;5minstall\u001b[0m action (implicitely by providing the --init_resource_match or --init_at switch) \u001b[0m Default action is: \u001b[0;38;5;5mlist\u001b[0m (show installable resources, -m <match> filters). \u001b[0m At install we will (re-)initialize a \"project_dir\", at location given with --init_at (default: '.'), incl: \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstalling available resources, like databases and tools within a given directory (conda_prefix) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mCreating resource start wrappers in <project_dir>/bin \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mGenerating default config when required \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mOptionally generating systemd unit files (e.g. via: --init_create_all_units) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstances support: export <name>_instances=x before running and you'll get x systemd units created, for startable commands. \u001b[0;38;5;5m \u001b[0;38;5;5m \u001b[0;38;5;5mExample: export client_instances=10; ops p -irm client -icau \u001b[0;38;5;5m \u001b[0;38;5;5m(Name of a resource: ops p [-m <match>])\u001b[0m \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mAny other parametrization: Via environ variables Check key environ vars in list output and also doc text. \u001b[0m Privilege escalation is not required for any of these steps. \u001b[0m Main command line flags [matching \u001b[1;32mops_devapp.project\u001b[0m]: \u001b[0;32mappc \u001b[1;33madd_post_process_cmd \u001b[0;31m''\u001b[0;38;5;245m Add this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[0;32mcp \u001b[1;33mconda_prefix \u001b[0;31m/home/runner/miniconda3\u001b[0;38;5;245m Resources install location, except filesystem based ones. Env vars resolved. Aliases: - local|l: <project_dir>/conda - default|d: $HOME/miniconda3 (default path of conda) - current|c: Any current conda_prefix set when running. Note: Installing resources outside the project keeps the project relocatable and resources reusable for other products. \u001b[0;32mdamsu \u001b[1;33mdelete_all_matching_service_unit_files \u001b[0;31m''\u001b[0;38;5;245m This removes all matching unit files calling devapp service wrappers. Say \"service\" to match all \u001b[0;32mdi \u001b[1;33mdev_install \u001b[0;31mFalse\u001b[0;38;5;245m Set the project up in developer mode - incl. make and poetry file machinery \u001b[0;32memrf \u001b[1;33medit_matching_resource_file \u001b[0;31m''\u001b[0;38;5;245m Open resource files in $EDITOR, matching given string in their content \u001b[0;32mf \u001b[1;33mforce \u001b[0;31mFalse\u001b[0;38;5;245m Assume y on all questions. Required when started w/o a tty \u001b[0;32mfr \u001b[1;33mforce_reinstall \u001b[0;31mFalse\u001b[0;38;5;245m Do not only install resources detected uninstalled but reinstall all \u001b[0;32mfd \u001b[1;33mfs_dir \u001b[0;31mdefault\u001b[0;38;5;245m Filesystem based resource location. Env vars resolved. Aliases: - local|l: <project_dir>/fs - default|d: $HOME/miniconda3/fs (default path of conda) - conda|c: Within conda_prefix/fs \u001b[0;32mia \u001b[1;33minit_at \u001b[0;31m''\u001b[0;38;5;245m Set up project in given directory. env vars / relative dirs supported. Sets install action implicitly \u001b[0;32micau \u001b[1;33minit_create_all_units \u001b[0;31mFalse\u001b[0;38;5;245m If set we create unit files for ALL service type resources \u001b[0;32micuf \u001b[1;33minit_create_unit_files \u001b[0;31m''\u001b[0;38;5;245m List service unit files you want to have created for systemctl --user. \u001b[0;38;5;241m Valid: Entries in rsc.provides, rsc.cmd or rsc.exe (i.e. the filename of the wrapper in bin dir). Not: rsc.name. \u001b[0;32mirm \u001b[1;33minit_resource_match \u001b[0;31m''\u001b[0;38;5;245m Like resource match but implies install action \u001b[0;32mi \u001b[1;33minstall \u001b[0;33mACTION\u001b[0;38;5;245m Install \u001b[0;32mis \u001b[1;33minstall_state \u001b[0;31mFalse\u001b[0;38;5;245m show install state infos \u001b[0;32ml \u001b[1;33mlist \u001b[1;33mACTION*\u001b[0;38;5;245m Show available definition files. \u001b[0;32mlrf \u001b[1;33mlist_resources_files \u001b[0;33mACTION\u001b[0;38;5;245m Alias for list action \u001b[0;32m \u001b[1;33mlog_resources_fully \u001b[0;31mFalse\u001b[0;38;5;245m Always output all settings of resources when logging \u001b[0;32mm \u001b[1;33mresource_match \u001b[0;31m''\u001b[0;38;5;245m Provide a match string for actions. Examples: -irm \"redis, hub\" or -irm '!mysql, !redis' (! negates). \u001b[0;32ms \u001b[1;33msystem \u001b[0;31m''\u001b[0;38;5;245m Set to a server for system mode API (e.g. lc hub(s)) \u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log. \u001b[0m -hf : All Flags -hf <match> gives help for ALL flags imported, here with a match: $ ops project -hf log | grep -A 100 'All supported' All supported command line flags [matching \u001b[1;32mlog\u001b[0m]: \u001b[1;34mabsl.logging \u001b[0;32m \u001b[1;33malsologtostderr \u001b[0;31mFalse\u001b[0;38;5;245m also log to stderr? \u001b[0;32m \u001b[1;33mlog_dir \u001b[0;31m''\u001b[0;38;5;245m directory to write logfiles into \u001b[0;32m \u001b[1;33mlogger_levels \u001b[0;31m''\u001b[0;38;5;245m Specify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG` \u001b[0;32m \u001b[1;33mlogtostderr \u001b[0;31mFalse\u001b[0;38;5;245m Should only log to stderr? \u001b[0;32m \u001b[1;33mshowprefixforinfo \u001b[0;31mTrue\u001b[0;38;5;245m If False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used. \u001b[0;32m \u001b[1;33mstderrthreshold \u001b[0;31mfatal\u001b[0;38;5;245m log messages at this level, or more severe, to stderr in addition to the logfile. Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'. Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr. \u001b[0;32mv \u001b[1;33mverbosity \u001b[0;31m-1\u001b[0;38;5;245m Logging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed. \u001b[1;34mdevapp.tools \u001b[0;32mdasdi \u001b[1;33msensitive_data_identifiers \u001b[0;31mpass.*|.*secret.*\u001b[0;38;5;245m Regexp which helps identify keys carrying sensitive information (for filtering out of logs). Case insensitive matching. \u001b[1;34mstructlogging.sl \u001b[0;32mlatn \u001b[1;33mlog_add_thread_name \u001b[0;31mFalse\u001b[0;38;5;245m Add name of thread \u001b[0;32mldcs \u001b[1;33mlog_dev_coljson_style \u001b[0;31mdark\u001b[0;38;5;245m Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render choose light or dark <abap|algol|algol_nu|arduino|autumn|borland|bw|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|gruvbox-dark|gruvbox-light|igor|inkpot|light|lilypond|lovelace|manni|material|monokai|murphy|native|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|stata|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn> \u001b[0;32mldfc \u001b[1;33mlog_dev_fmt_coljson \u001b[0;31mjson,payload\u001b[0;38;5;245m List of keys to log as json. \u001b[0;32mlf \u001b[1;33mlog_fmt \u001b[0;31mauto\u001b[0;38;5;245m Force a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json. Note: This value can be set away from auto via export log_fmt as well. \u001b[0;32mll \u001b[1;33mlog_level \u001b[0;31m20\u001b[0;38;5;245m Log level (10: debug, 20: info, ...). You may also say log_level=error \u001b[0;32mlsf \u001b[1;33mlog_stack_filter \u001b[0;31mfn not contains frozen and fn not contains /rx/\u001b[0;38;5;245m When logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable \u001b[0;38;5;241m Example: fn contains project and frame lt 1 (axiros/pycond expression) \u001b[0;32mlsmf \u001b[1;33mlog_stack_max_frames \u001b[0;31m3\u001b[0;38;5;245m Maximum Frames Shown in Terminal Stack Traces \u001b[0;32mltln \u001b[1;33mlog_thread_local_names \u001b[0;31mFalse\u001b[0;38;5;245m Prefer thread local logger_name, when set \u001b[0;32mltf \u001b[1;33mlog_time_fmt \u001b[0;31m%m-%d %H:%M:%S\u001b[0;38;5;245m Log time format. Shortcuts: \"ISO\", \"dt\" \u001b[1;34mops_devapp.project \u001b[0;32mappc \u001b[1;33madd_post_process_cmd \u001b[0;31m''\u001b[0;38;5;245m Add this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[0;32m \u001b[1;33mlog_resources_fully \u001b[0;31mFalse\u001b[0;38;5;245m Always output all settings of resources when logging \u001b[0m Flag Types \u00a4 $ cat / tmp / flagtest . py #!/usr/bin/env python from devapp.app import app , run_app , FLG class Flags : autoshort = '' # enabling short forms, prefixed with '', i.e. not prefixed class my_bool : d = False class my_float : d = 1.1 class my_int : d = 1 class my_multi_str : t = 'multi_string' # can supply more than once, any value class my_list : s = 'x' # non auto short form t = list # comma sepped values into a list d = 'foo, bar' class my_opt : t = [ 'foo' , 'bar' ] # can pick exactly one within the list (enum) d = 'foo' class my_opt_multi : t = ( 'a' , 'b' , 'c' ) # now we can select more than one within the tuple (multi_enum) d = 'a' class my_str : d = 'foo' # most easy way class my_str_detailed : '''Detailed help''' n = '''Options (multiline help) - opt1: foo - opt2: bar ''' s = False # disable short d = 'opt1' class my_condition : # will be parsed into an axiros/pycond filter, incl. the condition (list). t = 'pycond' d = 'fn not contains frozen and fn not contains /rx/' # Print out all FLG vals. # Normal (global) app access e.g. like : if FLG.my_int > 42: flg = lambda : [( k , getattr ( FLG , k )) for k in FLG if k . startswith ( 'my_' )] run = lambda : app . info ( 'Flag values (CLI over defaults):' , json = flg ()) if __name__ == '__main__' : # supplying the flags keyword implicitly calls devapp.tools.define_flags on them: run_app ( run , flags = Flags ) With this $ /tmp/flagtest.py -h \u001b[1;34m__main__ \u001b[0;32mmb \u001b[1;33mmy_bool \u001b[0;31mFalse \u001b[0;38;5;245mMy_bool \u001b[0;32mmc \u001b[1;33mmy_condition \u001b[0;31mfn not.. \u001b[0;38;5;245mMy_condition (axiros/pycond expression) \u001b[0;32mmf \u001b[1;33mmy_float \u001b[0;31m1.1 \u001b[0;38;5;245mMy_float \u001b[0;32mmi \u001b[1;33mmy_int \u001b[0;31m1 \u001b[0;38;5;245mMy_int \u001b[0;32mx \u001b[1;33mmy_list \u001b[0;31mfoo,bar \u001b[0;38;5;245mMy_list \u001b[0;32mmms \u001b[1;33mmy_multi_str \u001b[0;31m[''] \u001b[0;38;5;245mMy_multi_str; repeat this option to specify.. \u001b[0;32mmo \u001b[1;33mmy_opt \u001b[0;31mfoo \u001b[0;38;5;245m My_opt<foo|bar> \u001b[0;32mmom \u001b[1;33mmy_opt_multi \u001b[0;31m['a'] \u001b[0;38;5;245mMy_opt_multi; repeat this option to specify.. \u001b[0;32mms \u001b[1;33mmy_str \u001b[0;31mfoo \u001b[0;38;5;245mMy_str \u001b[0;32m \u001b[1;33mmy_str_detailed \u001b[0;31mopt1 \u001b[0;38;5;245mOptions (multiline help) - opt1: foo - opt2:.. \u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log. \u001b[0m $ /tmp/flagtest.py -mo baz || true FATAL Flags parsing error: flag --my_opt=baz: value should be one of <foo|bar> Pass --helpshort or --helpfull to see help on flags. $ /tmp/flagtest.py -ms a -mb -mf 42.1 -mi 42 -mms a -mms b -mo bar -mom b -mom c -x a,b -ms b -lf plain \u001b[2;38;5;5m07-25 16:06:03\u001b[0m [\u001b[38;5;2minfo \u001b[0m] Flag values (CLI over defaults):\u001b[0m [\u001b[38;5;5mflagtest\u001b[0m] \u001b[1;32mjson\u001b[0m=\u001b[1;38;5;11m\u001b[0m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_list\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"a\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_bool\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[94mtrue\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_condition\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"<function build_pycond_flag_expr.<locals>.<lambda> at 0x7fcc09a830e0>\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"fn not contains frozen and fn not contains /rx/\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_float\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[94m42.1\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_int\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[94m42\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_multi_str\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"a\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_opt\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"bar\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_opt_multi\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"c\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_str\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_str_detailed\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"opt1\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m ]\u001b[90m\u001b[39;49;00m \u001b[0m Hint Note my_str defined twice in the example - last wins (except when defined multi_string ) -> you can preparametrize apps in wrappers and still overwrite flags when calling the wrapper. E.g. in the wrapper you have -ll 20 while in the call you say -ll 10 to have debug logging for a certain run. Environ Flags \u00a4 Adding --environ_flags causes the app to check the process environ first(!), for any flag value. Setting project directory and log level via environ $ export init_at=\"$HOME/foo\"; export log_level=30 $ $ ops project -ia /tmp --environ_flags \u001b[31m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[1mTraceback \u001b[2m(most recent call last)\u001b[0m\u001b[31m\u001b[49m \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m\u001b[33m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1m\u001b[33m\u001b[49mapp.py\u001b[0m\u001b[39m\u001b[49m:\u001b[94m509\u001b[39m in \u001b[92mrun_phase_2\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m506 \u2502 \u2502 \u2502 # main = lambda: run_app(Action, flags=Flags, wrapper=clea\u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m507 \u2502 \u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mif\u001b[39m FLG.dirwatch: \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m508 \u2502 \u2502 \u2502 \u2502 \u001b[0m\u001b[39m\u001b[49msignal.signal(reload_signal, reload_handler) \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2771 \u001b[39m509 \u001b[2m\u2502 \u2502 \u2502 \u001b[0m\u001b[39m\u001b[49mres = wrapper(main) \u001b[94mif\u001b[39m wrapper \u001b[94melse\u001b[39m main() \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m510 \u2502 \u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mif\u001b[39m FLG.dirwatch: \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m511 \u2502 \u2502 \u2502 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.info(\u001b[33m'Keep running, dirwatch is set'\u001b[39m) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m512 \u2502 \u2502 \u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mwhile\u001b[39m \u001b[94m1\u001b[39m: \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m args = \u001b[1m[\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[2m\u2502 \u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[33m'/home/runner/miniconda3/envs/devapps_py3.7/bin/ops'\u001b[39m, \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[2m\u2502 \u001b[0m\u001b[33m\u001b[49m'project'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[1m]\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m ex = \u001b[1m\u001b[35mDieNow\u001b[39m(\u001b[0m\u001b[33m\u001b[49m'Not exists'\u001b[39m, \u001b[1m{\u001b[0m\u001b[33m\u001b[49m'dir'\u001b[39m: \u001b[33m'/home/runner/foo'\u001b[1m\u001b[39m})\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m flags_validator = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m kw_log = \u001b[1m{}\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m log = \u001b[1m<\u001b[35mAXLogger\u001b[39m(\u001b[0m\u001b[33m\u001b[49mcontext\u001b[39m=\u001b[1m{}\u001b[0m\u001b[39m\u001b[49m, \u001b[33mprocessors\u001b[39m=\u001b[1m[\u001b[0m\u001b[39m\u001b[49m<function \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m filter_by_level at \u001b[94m0x7fa9487c0290\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[1m<\u001b[95mstructlog.processors.TimeStamper\u001b[0m\u001b[39m\u001b[49m object at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa948329cd0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m add_log_level at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa9489599e0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m censor_passwords at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa9487c0320\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m add_logger_name at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa9487c03b0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m stack_info.<locals\u001b[1m>\u001b[0m\u001b[39m\u001b[49m._stack_info at \u001b[94m0x7fa949f2a440\u001b[39m>, \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[1m<\u001b[95mstructlogging.renderers.ThemeableConsoleRenderer\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m object at \u001b[94m0x7fa94869b9d0\u001b[1m\u001b[39m>])\u001b[0m\u001b[39m\u001b[49m> \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m main = \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m run at \u001b[94m0x7fa9486888c0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m name = \u001b[33m'project'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m post = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m res = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m watcher_pid = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m wrapper = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m\u001b[33m/home/runner/work/devapps/devapps/src/devapp/plugins/ops_devapp/project/\u001b[0;1m\u001b[33m\u001b[49m__in\u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[1m\u001b[33mit__.py\u001b[0m\u001b[39m\u001b[49m:\u001b[94m301\u001b[39m in \u001b[92mrun\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m298 \u2502 \u001b[0m\u001b[39m\u001b[49md = os.path.abspath(d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m299 \u2502 \u001b[0m\u001b[39m\u001b[49md = d[:-\u001b[94m1\u001b[39m] \u001b[94mif\u001b[39m d.endswith(\u001b[33m'/'\u001b[39m) \u001b[94melse\u001b[39m d \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m300 \u2502 \u001b[0m\u001b[94m\u001b[49mif\u001b[39m \u001b[95mnot\u001b[39m exists(d): \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2771 \u001b[39m301 \u001b[2m\u2502 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.die(\u001b[33m'Not exists'\u001b[39m, \u001b[96mdir\u001b[39m=d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m302 \u2502 \u001b[0m\u001b[39m\u001b[49mdo(os.chdir, d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m303 \u2502 \u001b[0m\u001b[39m\u001b[49md = FLG.init_at = os.path.abspath(\u001b[33m'.'\u001b[39m) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m304 \u2502 \u001b[0m\u001b[39m\u001b[49mproject.set_project_dir(\u001b[96mdir\u001b[39m=d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m d = \u001b[33m'/home/runner/foo'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m m = \u001b[33m''\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m\u001b[33m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1m\u001b[33m\u001b[49mapp.py\u001b[0m\u001b[39m\u001b[49m:\u001b[94m166\u001b[39m in \u001b[92mdie\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m163 \u2502 \u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m164 \u2502 \u001b[0m\u001b[94m\u001b[49mdef\u001b[39m \u001b[92mdie\u001b[39m(msg, **kw): \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m165 \u2502 \u2502 \u001b[0m\u001b[33m\u001b[49m\"\"\"Application decided to bail out\"\"\"\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2771 \u001b[39m166 \u001b[2m\u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mraise\u001b[39m DieNow(msg, kw) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m167 \u2502 \u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m168 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.die = die \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m169 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.name = name \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m kw = \u001b[1m{\u001b[0m\u001b[33m\u001b[49m'dir'\u001b[39m: \u001b[33m'/home/runner/foo'\u001b[1m\u001b[39m}\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m msg = \u001b[33m'Not exists'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u001b[1m\u001b[91mDieNow: \u001b[39m(\u001b[0m\u001b[32m\u001b[49m'Not exists'\u001b[39m, \u001b[1m{\u001b[0m\u001b[32m\u001b[49m'dir'\u001b[39m: \u001b[32m'/home/runner/foo'\u001b[1m\u001b[39m}) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:09\u001b[0m\u001b[39m\u001b[49m [\u001b[1m\u001b[38;5;124merror \u001b[0m\u001b[39m\u001b[49m] Not exists [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/foo \u001b[0m\u001b[39m\u001b[49m$ Environ over CLI Please note again that the environ value does overwrite the CLI value, when environ_flags is explicitly set. On the cli, you'd have to use the unset command first. Flagsets \u00a4 You can store full sets of flags in files and refer to them via the absl standard --flagfile=.... flag. Using Flags in pytest \u00a4 When the started process is pytest, then the environ_flags flag is set to true. Means you can export non default flag values before starting pytest like so: export my_flag=myval && pytest -xs test/test_my_test.py Action Flags \u00a4 Example: $ cat / tmp / action_flagtest . py #!/usr/bin/env python from devapp.app import app , run_app , FLG class Flags : autoshort = '' class force : d = False class Actions : class install : d = False class verbose : s = 'iv' # no auto for nested flags d = False class run : d = True # default class ActionNS : def _pre (): print ( 'pre' ) def _post (): print ( 'post' ) def run (): print ( 'running' , FLG . force ) def install (): print ( 'installing' , FLG . force , FLG . install_verbose ) if __name__ == '__main__' : run_app ( ActionNS , flags = Flags ) Test it: $ /tmp/action_flagtest.py -h \u001b[1;34m__main__ \u001b[0;32mf \u001b[1;33mforce \u001b[0;31mFalse \u001b[0;38;5;245mForce \u001b[0;32mi \u001b[1;33minstall \u001b[0;33mACTION \u001b[0;38;5;245mInstall \u001b[0;32mr \u001b[1;33mrun \u001b[1;33mACTION* \u001b[0;38;5;245mRun \u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log. \u001b[0m $ /tmp/action_flagtest.py pre running False post $ /tmp/action_flagtest.py install -iv pre installing False True post $ /tmp/action_flagtest.py -f install --install_verbose pre installing True True post $ /tmp/action_flagtest.py run --install_verbose=True || true FATAL Flags parsing error: Unknown command line flag 'install_verbose' Pass --helpshort or --helpfull to see help on flags. Mind the concatenation of action and flag name for the nested property verbose within def install() action. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Flags"},{"location":"dev/flags/#the-cli-flag-system","text":"devapps uses absl flags to get configured via the CLI or environ. Application modules and packages define the flags they require or support within their source code themselves. Dependent on which of these modules are imported at a certain time after startup (before the call to app.run ), then these are the flags presented to the user when he calls -h|--help|--helpful|-hf . Set flag values are then globals throughout the application. This makes a lot of sense when a package has a lot of varying use cases, with certain modules sometimes needed or not. Note It is allowed to do FLG.foo=bar after startup - but considered bad practice.","title":"The CLI Flag System"},{"location":"dev/flags/#flag-definitions-via-nested-class-trees","text":"In devapps, while fully supporting the standard absl mechanics ( flags.DEFINE_string ) we also allow to defined them in class name spaces: These are e.g. the flags of the project module: from devapp.app import FLG , app , run_app , do , system class Flags : # short codes built dynamically (conflict resolved) for all flags: autoshort = '' # You could give a short code prefix here # flag name: class force : # CLI help string: n = 'Assume y on all questions. Required when started w/o a tty' d = False # default class init_at : n = 'Set up project in given directory. env vars / relative dirs supported.' d = '' class init_create_unit_files : n = 'List service unit files you want to have created for systemctl --user' d = [] class init_resource_match : n = 'Install only matching resources. Example: -irm \"redis, hub\"' d = [] class list_resources_files : n = 'Show available definition files.' d = False class edit_matching_resource_file : n = 'Open resource files in $EDITOR, matching given string in their content' d = '' ( ... ) def run (): if FLG . init_at : # structlog call: app . info ( 'Re-initializing project' , location = FLG . init_at ) ( ... ) # if flags argument to run_app is given it will implicitly call devapp.tools.define_flags: main = lambda : run_app ( run , flags = Flags ) Full Control module import does not cause flags already to be defined, the parent class is just a namespace without any magic. Instead there is special call devapp.tools.define_flags(my_flags_class) , which calls absl.define_<type> for any of the inner classes. Handing the flags via the flags argument into run_app will issue that call. A call to help then lists the flags on the CLI: -h : Module Help This lists the supported flags for the module whose main method is called: $ ops project -h \u001b[1;38;5;11mCreating A Project With Resources \u001b[1;38;5;11m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[0m This plugin is helper for creating a project directory, incl. required local resources. Your system remains unchanged, except <project_dir> and <conda_prefix>. \u001b[0m It provides an \u001b[0;38;5;5minstall\u001b[0m action (implicitely by providing the --init_resource_match or --init_at switch) \u001b[0m Default action is: \u001b[0;38;5;5mlist\u001b[0m (show installable resources, -m <match> filters). \u001b[0m At install we will (re-)initialize a \"project_dir\", at location given with --init_at (default: '.'), incl: \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstalling available resources, like databases and tools within a given directory (conda_prefix) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mCreating resource start wrappers in <project_dir>/bin \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mGenerating default config when required \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mOptionally generating systemd unit files (e.g. via: --init_create_all_units) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstances support: export <name>_instances=x before running and you'll get x systemd units created, for startable commands. \u001b[0;38;5;5m \u001b[0;38;5;5m \u001b[0;38;5;5mExample: export client_instances=10; ops p -irm client -icau \u001b[0;38;5;5m \u001b[0;38;5;5m(Name of a resource: ops p [-m <match>])\u001b[0m \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mAny other parametrization: Via environ variables Check key environ vars in list output and also doc text. \u001b[0m Privilege escalation is not required for any of these steps. \u001b[0m Main command line flags [matching \u001b[1;32mops_devapp.project\u001b[0m]: \u001b[0;32mappc \u001b[1;33madd_post_process_cmd \u001b[0;31m''\u001b[0;38;5;245m Add this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[0;32mcp \u001b[1;33mconda_prefix \u001b[0;31m/home/runner/miniconda3\u001b[0;38;5;245m Resources install location, except filesystem based ones. Env vars resolved. Aliases: - local|l: <project_dir>/conda - default|d: $HOME/miniconda3 (default path of conda) - current|c: Any current conda_prefix set when running. Note: Installing resources outside the project keeps the project relocatable and resources reusable for other products. \u001b[0;32mdamsu \u001b[1;33mdelete_all_matching_service_unit_files \u001b[0;31m''\u001b[0;38;5;245m This removes all matching unit files calling devapp service wrappers. Say \"service\" to match all \u001b[0;32mdi \u001b[1;33mdev_install \u001b[0;31mFalse\u001b[0;38;5;245m Set the project up in developer mode - incl. make and poetry file machinery \u001b[0;32memrf \u001b[1;33medit_matching_resource_file \u001b[0;31m''\u001b[0;38;5;245m Open resource files in $EDITOR, matching given string in their content \u001b[0;32mf \u001b[1;33mforce \u001b[0;31mFalse\u001b[0;38;5;245m Assume y on all questions. Required when started w/o a tty \u001b[0;32mfr \u001b[1;33mforce_reinstall \u001b[0;31mFalse\u001b[0;38;5;245m Do not only install resources detected uninstalled but reinstall all \u001b[0;32mfd \u001b[1;33mfs_dir \u001b[0;31mdefault\u001b[0;38;5;245m Filesystem based resource location. Env vars resolved. Aliases: - local|l: <project_dir>/fs - default|d: $HOME/miniconda3/fs (default path of conda) - conda|c: Within conda_prefix/fs \u001b[0;32mia \u001b[1;33minit_at \u001b[0;31m''\u001b[0;38;5;245m Set up project in given directory. env vars / relative dirs supported. Sets install action implicitly \u001b[0;32micau \u001b[1;33minit_create_all_units \u001b[0;31mFalse\u001b[0;38;5;245m If set we create unit files for ALL service type resources \u001b[0;32micuf \u001b[1;33minit_create_unit_files \u001b[0;31m''\u001b[0;38;5;245m List service unit files you want to have created for systemctl --user. \u001b[0;38;5;241m Valid: Entries in rsc.provides, rsc.cmd or rsc.exe (i.e. the filename of the wrapper in bin dir). Not: rsc.name. \u001b[0;32mirm \u001b[1;33minit_resource_match \u001b[0;31m''\u001b[0;38;5;245m Like resource match but implies install action \u001b[0;32mi \u001b[1;33minstall \u001b[0;33mACTION\u001b[0;38;5;245m Install \u001b[0;32mis \u001b[1;33minstall_state \u001b[0;31mFalse\u001b[0;38;5;245m show install state infos \u001b[0;32ml \u001b[1;33mlist \u001b[1;33mACTION*\u001b[0;38;5;245m Show available definition files. \u001b[0;32mlrf \u001b[1;33mlist_resources_files \u001b[0;33mACTION\u001b[0;38;5;245m Alias for list action \u001b[0;32m \u001b[1;33mlog_resources_fully \u001b[0;31mFalse\u001b[0;38;5;245m Always output all settings of resources when logging \u001b[0;32mm \u001b[1;33mresource_match \u001b[0;31m''\u001b[0;38;5;245m Provide a match string for actions. Examples: -irm \"redis, hub\" or -irm '!mysql, !redis' (! negates). \u001b[0;32ms \u001b[1;33msystem \u001b[0;31m''\u001b[0;38;5;245m Set to a server for system mode API (e.g. lc hub(s)) \u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log. \u001b[0m -hf : All Flags -hf <match> gives help for ALL flags imported, here with a match: $ ops project -hf log | grep -A 100 'All supported' All supported command line flags [matching \u001b[1;32mlog\u001b[0m]: \u001b[1;34mabsl.logging \u001b[0;32m \u001b[1;33malsologtostderr \u001b[0;31mFalse\u001b[0;38;5;245m also log to stderr? \u001b[0;32m \u001b[1;33mlog_dir \u001b[0;31m''\u001b[0;38;5;245m directory to write logfiles into \u001b[0;32m \u001b[1;33mlogger_levels \u001b[0;31m''\u001b[0;38;5;245m Specify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG` \u001b[0;32m \u001b[1;33mlogtostderr \u001b[0;31mFalse\u001b[0;38;5;245m Should only log to stderr? \u001b[0;32m \u001b[1;33mshowprefixforinfo \u001b[0;31mTrue\u001b[0;38;5;245m If False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used. \u001b[0;32m \u001b[1;33mstderrthreshold \u001b[0;31mfatal\u001b[0;38;5;245m log messages at this level, or more severe, to stderr in addition to the logfile. Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'. Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr. \u001b[0;32mv \u001b[1;33mverbosity \u001b[0;31m-1\u001b[0;38;5;245m Logging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed. \u001b[1;34mdevapp.tools \u001b[0;32mdasdi \u001b[1;33msensitive_data_identifiers \u001b[0;31mpass.*|.*secret.*\u001b[0;38;5;245m Regexp which helps identify keys carrying sensitive information (for filtering out of logs). Case insensitive matching. \u001b[1;34mstructlogging.sl \u001b[0;32mlatn \u001b[1;33mlog_add_thread_name \u001b[0;31mFalse\u001b[0;38;5;245m Add name of thread \u001b[0;32mldcs \u001b[1;33mlog_dev_coljson_style \u001b[0;31mdark\u001b[0;38;5;245m Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render choose light or dark <abap|algol|algol_nu|arduino|autumn|borland|bw|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|gruvbox-dark|gruvbox-light|igor|inkpot|light|lilypond|lovelace|manni|material|monokai|murphy|native|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|stata|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn> \u001b[0;32mldfc \u001b[1;33mlog_dev_fmt_coljson \u001b[0;31mjson,payload\u001b[0;38;5;245m List of keys to log as json. \u001b[0;32mlf \u001b[1;33mlog_fmt \u001b[0;31mauto\u001b[0;38;5;245m Force a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json. Note: This value can be set away from auto via export log_fmt as well. \u001b[0;32mll \u001b[1;33mlog_level \u001b[0;31m20\u001b[0;38;5;245m Log level (10: debug, 20: info, ...). You may also say log_level=error \u001b[0;32mlsf \u001b[1;33mlog_stack_filter \u001b[0;31mfn not contains frozen and fn not contains /rx/\u001b[0;38;5;245m When logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable \u001b[0;38;5;241m Example: fn contains project and frame lt 1 (axiros/pycond expression) \u001b[0;32mlsmf \u001b[1;33mlog_stack_max_frames \u001b[0;31m3\u001b[0;38;5;245m Maximum Frames Shown in Terminal Stack Traces \u001b[0;32mltln \u001b[1;33mlog_thread_local_names \u001b[0;31mFalse\u001b[0;38;5;245m Prefer thread local logger_name, when set \u001b[0;32mltf \u001b[1;33mlog_time_fmt \u001b[0;31m%m-%d %H:%M:%S\u001b[0;38;5;245m Log time format. Shortcuts: \"ISO\", \"dt\" \u001b[1;34mops_devapp.project \u001b[0;32mappc \u001b[1;33madd_post_process_cmd \u001b[0;31m''\u001b[0;38;5;245m Add this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[0;32m \u001b[1;33mlog_resources_fully \u001b[0;31mFalse\u001b[0;38;5;245m Always output all settings of resources when logging \u001b[0m","title":"Flag Definitions via Nested Class Trees"},{"location":"dev/flags/#flag-types","text":"$ cat / tmp / flagtest . py #!/usr/bin/env python from devapp.app import app , run_app , FLG class Flags : autoshort = '' # enabling short forms, prefixed with '', i.e. not prefixed class my_bool : d = False class my_float : d = 1.1 class my_int : d = 1 class my_multi_str : t = 'multi_string' # can supply more than once, any value class my_list : s = 'x' # non auto short form t = list # comma sepped values into a list d = 'foo, bar' class my_opt : t = [ 'foo' , 'bar' ] # can pick exactly one within the list (enum) d = 'foo' class my_opt_multi : t = ( 'a' , 'b' , 'c' ) # now we can select more than one within the tuple (multi_enum) d = 'a' class my_str : d = 'foo' # most easy way class my_str_detailed : '''Detailed help''' n = '''Options (multiline help) - opt1: foo - opt2: bar ''' s = False # disable short d = 'opt1' class my_condition : # will be parsed into an axiros/pycond filter, incl. the condition (list). t = 'pycond' d = 'fn not contains frozen and fn not contains /rx/' # Print out all FLG vals. # Normal (global) app access e.g. like : if FLG.my_int > 42: flg = lambda : [( k , getattr ( FLG , k )) for k in FLG if k . startswith ( 'my_' )] run = lambda : app . info ( 'Flag values (CLI over defaults):' , json = flg ()) if __name__ == '__main__' : # supplying the flags keyword implicitly calls devapp.tools.define_flags on them: run_app ( run , flags = Flags ) With this $ /tmp/flagtest.py -h \u001b[1;34m__main__ \u001b[0;32mmb \u001b[1;33mmy_bool \u001b[0;31mFalse \u001b[0;38;5;245mMy_bool \u001b[0;32mmc \u001b[1;33mmy_condition \u001b[0;31mfn not.. \u001b[0;38;5;245mMy_condition (axiros/pycond expression) \u001b[0;32mmf \u001b[1;33mmy_float \u001b[0;31m1.1 \u001b[0;38;5;245mMy_float \u001b[0;32mmi \u001b[1;33mmy_int \u001b[0;31m1 \u001b[0;38;5;245mMy_int \u001b[0;32mx \u001b[1;33mmy_list \u001b[0;31mfoo,bar \u001b[0;38;5;245mMy_list \u001b[0;32mmms \u001b[1;33mmy_multi_str \u001b[0;31m[''] \u001b[0;38;5;245mMy_multi_str; repeat this option to specify.. \u001b[0;32mmo \u001b[1;33mmy_opt \u001b[0;31mfoo \u001b[0;38;5;245m My_opt<foo|bar> \u001b[0;32mmom \u001b[1;33mmy_opt_multi \u001b[0;31m['a'] \u001b[0;38;5;245mMy_opt_multi; repeat this option to specify.. \u001b[0;32mms \u001b[1;33mmy_str \u001b[0;31mfoo \u001b[0;38;5;245mMy_str \u001b[0;32m \u001b[1;33mmy_str_detailed \u001b[0;31mopt1 \u001b[0;38;5;245mOptions (multiline help) - opt1: foo - opt2:.. \u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log. \u001b[0m $ /tmp/flagtest.py -mo baz || true FATAL Flags parsing error: flag --my_opt=baz: value should be one of <foo|bar> Pass --helpshort or --helpfull to see help on flags. $ /tmp/flagtest.py -ms a -mb -mf 42.1 -mi 42 -mms a -mms b -mo bar -mom b -mom c -x a,b -ms b -lf plain \u001b[2;38;5;5m07-25 16:06:03\u001b[0m [\u001b[38;5;2minfo \u001b[0m] Flag values (CLI over defaults):\u001b[0m [\u001b[38;5;5mflagtest\u001b[0m] \u001b[1;32mjson\u001b[0m=\u001b[1;38;5;11m\u001b[0m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_list\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"a\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_bool\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[94mtrue\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_condition\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"<function build_pycond_flag_expr.<locals>.<lambda> at 0x7fcc09a830e0>\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"fn not contains frozen and fn not contains /rx/\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_float\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[94m42.1\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_int\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[94m42\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_multi_str\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"a\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_opt\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"bar\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_opt_multi\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"c\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_str\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"b\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m],\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m[\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"my_str_detailed\"\u001b[39;49;00m,\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m\u001b[33m\"opt1\"\u001b[39;49;00m\u001b[90m\u001b[39;49;00m \u001b[90m \u001b[39;49;00m]\u001b[90m\u001b[39;49;00m ]\u001b[90m\u001b[39;49;00m \u001b[0m Hint Note my_str defined twice in the example - last wins (except when defined multi_string ) -> you can preparametrize apps in wrappers and still overwrite flags when calling the wrapper. E.g. in the wrapper you have -ll 20 while in the call you say -ll 10 to have debug logging for a certain run.","title":"Flag Types"},{"location":"dev/flags/#environ-flags","text":"Adding --environ_flags causes the app to check the process environ first(!), for any flag value. Setting project directory and log level via environ $ export init_at=\"$HOME/foo\"; export log_level=30 $ $ ops project -ia /tmp --environ_flags \u001b[31m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[1mTraceback \u001b[2m(most recent call last)\u001b[0m\u001b[31m\u001b[49m \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m\u001b[33m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1m\u001b[33m\u001b[49mapp.py\u001b[0m\u001b[39m\u001b[49m:\u001b[94m509\u001b[39m in \u001b[92mrun_phase_2\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m506 \u2502 \u2502 \u2502 # main = lambda: run_app(Action, flags=Flags, wrapper=clea\u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m507 \u2502 \u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mif\u001b[39m FLG.dirwatch: \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m508 \u2502 \u2502 \u2502 \u2502 \u001b[0m\u001b[39m\u001b[49msignal.signal(reload_signal, reload_handler) \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2771 \u001b[39m509 \u001b[2m\u2502 \u2502 \u2502 \u001b[0m\u001b[39m\u001b[49mres = wrapper(main) \u001b[94mif\u001b[39m wrapper \u001b[94melse\u001b[39m main() \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m510 \u2502 \u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mif\u001b[39m FLG.dirwatch: \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m511 \u2502 \u2502 \u2502 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.info(\u001b[33m'Keep running, dirwatch is set'\u001b[39m) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m512 \u2502 \u2502 \u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mwhile\u001b[39m \u001b[94m1\u001b[39m: \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m args = \u001b[1m[\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[2m\u2502 \u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[33m'/home/runner/miniconda3/envs/devapps_py3.7/bin/ops'\u001b[39m, \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[2m\u2502 \u001b[0m\u001b[33m\u001b[49m'project'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[1m]\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m ex = \u001b[1m\u001b[35mDieNow\u001b[39m(\u001b[0m\u001b[33m\u001b[49m'Not exists'\u001b[39m, \u001b[1m{\u001b[0m\u001b[33m\u001b[49m'dir'\u001b[39m: \u001b[33m'/home/runner/foo'\u001b[1m\u001b[39m})\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m flags_validator = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m kw_log = \u001b[1m{}\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m log = \u001b[1m<\u001b[35mAXLogger\u001b[39m(\u001b[0m\u001b[33m\u001b[49mcontext\u001b[39m=\u001b[1m{}\u001b[0m\u001b[39m\u001b[49m, \u001b[33mprocessors\u001b[39m=\u001b[1m[\u001b[0m\u001b[39m\u001b[49m<function \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m filter_by_level at \u001b[94m0x7fa9487c0290\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[1m<\u001b[95mstructlog.processors.TimeStamper\u001b[0m\u001b[39m\u001b[49m object at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa948329cd0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m add_log_level at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa9489599e0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m censor_passwords at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa9487c0320\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m add_logger_name at \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[94m0x7fa9487c03b0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m, \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m stack_info.<locals\u001b[1m>\u001b[0m\u001b[39m\u001b[49m._stack_info at \u001b[94m0x7fa949f2a440\u001b[39m>, \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[1m<\u001b[95mstructlogging.renderers.ThemeableConsoleRenderer\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m object at \u001b[94m0x7fa94869b9d0\u001b[1m\u001b[39m>])\u001b[0m\u001b[39m\u001b[49m> \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m main = \u001b[1m<\u001b[95mfunction\u001b[0m\u001b[39m\u001b[49m run at \u001b[94m0x7fa9486888c0\u001b[1m\u001b[39m>\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m name = \u001b[33m'project'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m post = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m res = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m watcher_pid = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m wrapper = \u001b[94mNone\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m\u001b[33m/home/runner/work/devapps/devapps/src/devapp/plugins/ops_devapp/project/\u001b[0;1m\u001b[33m\u001b[49m__in\u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[1m\u001b[33mit__.py\u001b[0m\u001b[39m\u001b[49m:\u001b[94m301\u001b[39m in \u001b[92mrun\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m298 \u2502 \u001b[0m\u001b[39m\u001b[49md = os.path.abspath(d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m299 \u2502 \u001b[0m\u001b[39m\u001b[49md = d[:-\u001b[94m1\u001b[39m] \u001b[94mif\u001b[39m d.endswith(\u001b[33m'/'\u001b[39m) \u001b[94melse\u001b[39m d \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m300 \u2502 \u001b[0m\u001b[94m\u001b[49mif\u001b[39m \u001b[95mnot\u001b[39m exists(d): \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2771 \u001b[39m301 \u001b[2m\u2502 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.die(\u001b[33m'Not exists'\u001b[39m, \u001b[96mdir\u001b[39m=d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m302 \u2502 \u001b[0m\u001b[39m\u001b[49mdo(os.chdir, d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m303 \u2502 \u001b[0m\u001b[39m\u001b[49md = FLG.init_at = os.path.abspath(\u001b[33m'.'\u001b[39m) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m304 \u2502 \u001b[0m\u001b[39m\u001b[49mproject.set_project_dir(\u001b[96mdir\u001b[39m=d) \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m d = \u001b[33m'/home/runner/foo'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m m = \u001b[33m''\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m\u001b[33m/home/runner/work/devapps/devapps/src/devapp/\u001b[0;1m\u001b[33m\u001b[49mapp.py\u001b[0m\u001b[39m\u001b[49m:\u001b[94m166\u001b[39m in \u001b[92mdie\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m163 \u2502 \u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m164 \u2502 \u001b[0m\u001b[94m\u001b[49mdef\u001b[39m \u001b[92mdie\u001b[39m(msg, **kw): \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m165 \u2502 \u2502 \u001b[0m\u001b[33m\u001b[49m\"\"\"Application decided to bail out\"\"\"\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2771 \u001b[39m166 \u001b[2m\u2502 \u2502 \u001b[0m\u001b[94m\u001b[49mraise\u001b[39m DieNow(msg, kw) \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m167 \u2502 \u001b[0m\u001b[39m\u001b[49m \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m168 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.die = die \u001b[31m\u2502 \u2502\u001b[39m \u001b[2m169 \u2502 \u001b[0m\u001b[39m\u001b[49mapp.name = name \u001b[31m\u2502 \u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m kw = \u001b[1m{\u001b[0m\u001b[33m\u001b[49m'dir'\u001b[39m: \u001b[33m'/home/runner/foo'\u001b[1m\u001b[39m}\u001b[0m\u001b[39m\u001b[49m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2502\u001b[39m msg = \u001b[33m'Not exists'\u001b[39m \u001b[33m\u2502\u001b[39m \u001b[31m\u2502 \u2502\u001b[39m \u001b[33m\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u001b[39m \u001b[31m\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u001b[1m\u001b[91mDieNow: \u001b[39m(\u001b[0m\u001b[32m\u001b[49m'Not exists'\u001b[39m, \u001b[1m{\u001b[0m\u001b[32m\u001b[49m'dir'\u001b[39m: \u001b[32m'/home/runner/foo'\u001b[1m\u001b[39m}) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:09\u001b[0m\u001b[39m\u001b[49m [\u001b[1m\u001b[38;5;124merror \u001b[0m\u001b[39m\u001b[49m] Not exists [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/foo \u001b[0m\u001b[39m\u001b[49m$ Environ over CLI Please note again that the environ value does overwrite the CLI value, when environ_flags is explicitly set. On the cli, you'd have to use the unset command first.","title":"Environ Flags"},{"location":"dev/flags/#flagsets","text":"You can store full sets of flags in files and refer to them via the absl standard --flagfile=.... flag.","title":"Flagsets"},{"location":"dev/flags/#using-flags-in-pytest","text":"When the started process is pytest, then the environ_flags flag is set to true. Means you can export non default flag values before starting pytest like so: export my_flag=myval && pytest -xs test/test_my_test.py","title":"Using Flags in pytest"},{"location":"dev/flags/#action-flags","text":"Example: $ cat / tmp / action_flagtest . py #!/usr/bin/env python from devapp.app import app , run_app , FLG class Flags : autoshort = '' class force : d = False class Actions : class install : d = False class verbose : s = 'iv' # no auto for nested flags d = False class run : d = True # default class ActionNS : def _pre (): print ( 'pre' ) def _post (): print ( 'post' ) def run (): print ( 'running' , FLG . force ) def install (): print ( 'installing' , FLG . force , FLG . install_verbose ) if __name__ == '__main__' : run_app ( ActionNS , flags = Flags ) Test it: $ /tmp/action_flagtest.py -h \u001b[1;34m__main__ \u001b[0;32mf \u001b[1;33mforce \u001b[0;31mFalse \u001b[0;38;5;245mForce \u001b[0;32mi \u001b[1;33minstall \u001b[0;33mACTION \u001b[0;38;5;245mInstall \u001b[0;32mr \u001b[1;33mrun \u001b[1;33mACTION* \u001b[0;38;5;245mRun \u001b[36m-hf [match string]\u001b[0m: List \u001b[36;1mALL\u001b[0m (matching) flags. E.g. -hf or -hf log. \u001b[0m $ /tmp/action_flagtest.py pre running False post $ /tmp/action_flagtest.py install -iv pre installing False True post $ /tmp/action_flagtest.py -f install --install_verbose pre installing True True post $ /tmp/action_flagtest.py run --install_verbose=True || true FATAL Flags parsing error: Unknown command line flag 'install_verbose' Pass --helpshort or --helpfull to see help on flags. Mind the concatenation of action and flag name for the nested property verbose within def install() action. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Action Flags"},{"location":"dev/logging/","text":"Logging \u00a4 You have a rich structured logging system, backed by structlog : The features we show by matching the help full (-hf) output of an arbitrary app (here ops project ) on the match string \"log\": $ ops project -hf log \u001b[1;38;5;11mCreating A Project With Resources \u001b[1;38;5;11m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[0m This plugin is helper for creating a project directory, incl. required local resources. Your system remains unchanged, except <project_dir> and <conda_prefix>. \u001b[0m It provides an \u001b[0;38;5;5minstall\u001b[0m action (implicitely by providing the --init_resource_match or --init_at switch) \u001b[0m Default action is: \u001b[0;38;5;5mlist\u001b[0m (show installable resources, -m <match> filters). \u001b[0m At install we will (re-)initialize a \"project_dir\", at location given with --init_at (default: '.'), incl: \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstalling available resources, like databases and tools within a given directory (conda_prefix) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mCreating resource start wrappers in <project_dir>/bin \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mGenerating default config when required \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mOptionally generating systemd unit files (e.g. via: --init_create_all_units) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstances support: export <name>_instances=x before running and you'll get x systemd units created, for startable commands. \u001b[0;38;5;5m \u001b[0;38;5;5m \u001b[0;38;5;5mExample: export client_instances=10; ops p -irm client -icau \u001b[0;38;5;5m \u001b[0;38;5;5m(Name of a resource: ops p [-m <match>])\u001b[0m \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mAny other parametrization: Via environ variables Check key environ vars in list output and also doc text. \u001b[0m Privilege escalation is not required for any of these steps. \u001b[0m All supported command line flags [matching \u001b[1;32mlog\u001b[0m]: \u001b[1;34mabsl.logging \u001b[0;32m \u001b[1;33malsologtostderr \u001b[0;31mFalse\u001b[0;38;5;245m also log to stderr? \u001b[0;32m \u001b[1;33mlog_dir \u001b[0;31m''\u001b[0;38;5;245m directory to write logfiles into \u001b[0;32m \u001b[1;33mlogger_levels \u001b[0;31m''\u001b[0;38;5;245m Specify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG` \u001b[0;32m \u001b[1;33mlogtostderr \u001b[0;31mFalse\u001b[0;38;5;245m Should only log to stderr? \u001b[0;32m \u001b[1;33mshowprefixforinfo \u001b[0;31mTrue\u001b[0;38;5;245m If False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used. \u001b[0;32m \u001b[1;33mstderrthreshold \u001b[0;31mfatal\u001b[0;38;5;245m log messages at this level, or more severe, to stderr in addition to the logfile. Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'. Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr. \u001b[0;32mv \u001b[1;33mverbosity \u001b[0;31m-1\u001b[0;38;5;245m Logging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed. \u001b[1;34mdevapp.tools \u001b[0;32mdasdi \u001b[1;33msensitive_data_identifiers \u001b[0;31mpass.*|.*secret.*\u001b[0;38;5;245m Regexp which helps identify keys carrying sensitive information (for filtering out of logs). Case insensitive matching. \u001b[1;34mstructlogging.sl \u001b[0;32mlatn \u001b[1;33mlog_add_thread_name \u001b[0;31mFalse\u001b[0;38;5;245m Add name of thread \u001b[0;32mldcs \u001b[1;33mlog_dev_coljson_style \u001b[0;31mdark\u001b[0;38;5;245m Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render choose light or dark <abap|algol|algol_nu|arduino|autumn|borland|bw|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|gruvbox-dark|gruvbox-light|igor|inkpot|light|lilypond|lovelace|manni|material|monokai|murphy|native|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|stata|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn> \u001b[0;32mldfc \u001b[1;33mlog_dev_fmt_coljson \u001b[0;31mjson,payload\u001b[0;38;5;245m List of keys to log as json. \u001b[0;32mlf \u001b[1;33mlog_fmt \u001b[0;31mauto\u001b[0;38;5;245m Force a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json. Note: This value can be set away from auto via export log_fmt as well. \u001b[0;32mll \u001b[1;33mlog_level \u001b[0;31m20\u001b[0;38;5;245m Log level (10: debug, 20: info, ...). You may also say log_level=error \u001b[0;32mlsf \u001b[1;33mlog_stack_filter \u001b[0;31mfn not contains frozen and fn not contains /rx/\u001b[0;38;5;245m When logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable \u001b[0;38;5;241m Example: fn contains project and frame lt 1 (axiros/pycond expression) \u001b[0;32mlsmf \u001b[1;33mlog_stack_max_frames \u001b[0;31m3\u001b[0;38;5;245m Maximum Frames Shown in Terminal Stack Traces \u001b[0;32mltln \u001b[1;33mlog_thread_local_names \u001b[0;31mFalse\u001b[0;38;5;245m Prefer thread local logger_name, when set \u001b[0;32mltf \u001b[1;33mlog_time_fmt \u001b[0;31m%m-%d %H:%M:%S\u001b[0;38;5;245m Log time format. Shortcuts: \"ISO\", \"dt\" \u001b[1;34mops_devapp.project \u001b[0;32mappc \u001b[1;33madd_post_process_cmd \u001b[0;31m''\u001b[0;38;5;245m Add this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[0;32m \u001b[1;33mlog_resources_fully \u001b[0;31mFalse\u001b[0;38;5;245m Always output all settings of resources when logging \u001b[0m typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Logging"},{"location":"dev/logging/#logging","text":"You have a rich structured logging system, backed by structlog : The features we show by matching the help full (-hf) output of an arbitrary app (here ops project ) on the match string \"log\": $ ops project -hf log \u001b[1;38;5;11mCreating A Project With Resources \u001b[1;38;5;11m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[0m This plugin is helper for creating a project directory, incl. required local resources. Your system remains unchanged, except <project_dir> and <conda_prefix>. \u001b[0m It provides an \u001b[0;38;5;5minstall\u001b[0m action (implicitely by providing the --init_resource_match or --init_at switch) \u001b[0m Default action is: \u001b[0;38;5;5mlist\u001b[0m (show installable resources, -m <match> filters). \u001b[0m At install we will (re-)initialize a \"project_dir\", at location given with --init_at (default: '.'), incl: \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstalling available resources, like databases and tools within a given directory (conda_prefix) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mCreating resource start wrappers in <project_dir>/bin \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mGenerating default config when required \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mOptionally generating systemd unit files (e.g. via: --init_create_all_units) \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mInstances support: export <name>_instances=x before running and you'll get x systemd units created, for startable commands. \u001b[0;38;5;5m \u001b[0;38;5;5m \u001b[0;38;5;5mExample: export client_instances=10; ops p -irm client -icau \u001b[0;38;5;5m \u001b[0;38;5;5m(Name of a resource: ops p [-m <match>])\u001b[0m \u001b[0m \u001b[0;38;5;5m\u2756 \u001b[0mAny other parametrization: Via environ variables Check key environ vars in list output and also doc text. \u001b[0m Privilege escalation is not required for any of these steps. \u001b[0m All supported command line flags [matching \u001b[1;32mlog\u001b[0m]: \u001b[1;34mabsl.logging \u001b[0;32m \u001b[1;33malsologtostderr \u001b[0;31mFalse\u001b[0;38;5;245m also log to stderr? \u001b[0;32m \u001b[1;33mlog_dir \u001b[0;31m''\u001b[0;38;5;245m directory to write logfiles into \u001b[0;32m \u001b[1;33mlogger_levels \u001b[0;31m''\u001b[0;38;5;245m Specify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG` \u001b[0;32m \u001b[1;33mlogtostderr \u001b[0;31mFalse\u001b[0;38;5;245m Should only log to stderr? \u001b[0;32m \u001b[1;33mshowprefixforinfo \u001b[0;31mTrue\u001b[0;38;5;245m If False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used. \u001b[0;32m \u001b[1;33mstderrthreshold \u001b[0;31mfatal\u001b[0;38;5;245m log messages at this level, or more severe, to stderr in addition to the logfile. Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'. Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr. \u001b[0;32mv \u001b[1;33mverbosity \u001b[0;31m-1\u001b[0;38;5;245m Logging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed. \u001b[1;34mdevapp.tools \u001b[0;32mdasdi \u001b[1;33msensitive_data_identifiers \u001b[0;31mpass.*|.*secret.*\u001b[0;38;5;245m Regexp which helps identify keys carrying sensitive information (for filtering out of logs). Case insensitive matching. \u001b[1;34mstructlogging.sl \u001b[0;32mlatn \u001b[1;33mlog_add_thread_name \u001b[0;31mFalse\u001b[0;38;5;245m Add name of thread \u001b[0;32mldcs \u001b[1;33mlog_dev_coljson_style \u001b[0;31mdark\u001b[0;38;5;245m Pygments style for colorized json. To use the 16 base colors and leave it to the terminal palette how to render choose light or dark <abap|algol|algol_nu|arduino|autumn|borland|bw|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|gruvbox-dark|gruvbox-light|igor|inkpot|light|lilypond|lovelace|manni|material|monokai|murphy|native|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|stata|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn> \u001b[0;32mldfc \u001b[1;33mlog_dev_fmt_coljson \u001b[0;31mjson,payload\u001b[0;38;5;245m List of keys to log as json. \u001b[0;32mlf \u001b[1;33mlog_fmt \u001b[0;31mauto\u001b[0;38;5;245m Force a log format. 0: off, 1: auto, 2: plain, 3: plain_no_colors, 4: json. Note: This value can be set away from auto via export log_fmt as well. \u001b[0;32mll \u001b[1;33mlog_level \u001b[0;31m20\u001b[0;38;5;245m Log level (10: debug, 20: info, ...). You may also say log_level=error \u001b[0;32mlsf \u001b[1;33mlog_stack_filter \u001b[0;31mfn not contains frozen and fn not contains /rx/\u001b[0;38;5;245m When logging error tracebacks this is an optional filter. Keywords:fn: filename, frame: frame nr, line: line nr, name: name of callable \u001b[0;38;5;241m Example: fn contains project and frame lt 1 (axiros/pycond expression) \u001b[0;32mlsmf \u001b[1;33mlog_stack_max_frames \u001b[0;31m3\u001b[0;38;5;245m Maximum Frames Shown in Terminal Stack Traces \u001b[0;32mltln \u001b[1;33mlog_thread_local_names \u001b[0;31mFalse\u001b[0;38;5;245m Prefer thread local logger_name, when set \u001b[0;32mltf \u001b[1;33mlog_time_fmt \u001b[0;31m%m-%d %H:%M:%S\u001b[0;38;5;245m Log time format. Shortcuts: \"ISO\", \"dt\" \u001b[1;34mops_devapp.project \u001b[0;32mappc \u001b[1;33madd_post_process_cmd \u001b[0;31m''\u001b[0;38;5;245m Add this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[0;32m \u001b[1;33mlog_resources_fully \u001b[0;31mFalse\u001b[0;38;5;245m Always output all settings of resources when logging \u001b[0m typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Logging"},{"location":"dev/plugins/","text":"Plugins \u00a4 Here is how you create or extend tools with plugins, callable like <toolname> <pluginname> [plugin flags] . Git Analogy In this terminology, \"git\" would be the name of the tool, \"checkout\" would be the name of the plugin. Defining a New Tool \u00a4 In your pyproject.toml add the name of the tool within the scripts section like so: [ tool . poetry . scripts ] myapp = \"devapp.tools.plugin:main\" This makes the tool available, with no plugins yet: $ poetry install Installing dependencies from lock file No dependencies to install or update Installing the current project: devapps (2023.06.20) $ myapp -h || true No plugins found. Create <namespace>/plugins/myapp_<namespace>/ folder(s), containing importable python modules. We are ready to create plugins: Plugins must reside within <package>/plugins/<tool_name>_<package_name>/ subdirectory of packages of the current repo. The package name at the end is to allow \"higher order repos\" to supply plugins with same name but changed behaviour. For the demo we pick the devapp package within this repo, devapps : $ mkdir -p \"src/devapp/plugins/myapp_devapp\" && ls \"src/devapp/plugins\" && pwd dev_devapp myapp_devapp ops_devapp /home/runner/work/devapps/devapps Then we create a demo plugin: $ cat src / devapp / plugins / myapp_devapp / say_hello . py \"\"\" Saying Hello \"\"\" from functools import partial from devapp.app import run_app , do , app from devapp.tools import FLG class Flags : 'Simple Hello World' autoshort = 'g' # all short forms for our flags prefixed with this class name : n = 'Who shall be greeted' d = 'User' # --------------------------------------------------------------------------- app def greet ( name ): print ( 'Hey, %s !' % name ) def run (): do ( greet , name = FLG . name ) main = partial ( run_app , run , flags = Flags ) The plugin is now available: $ myapp -h Usage: myapp ACTION [--flag[=value] ...] Available Action Plugins: - \u001b[1;32msay_hello\u001b[0m Help: myapp <action> <-h|--helpfull> [match] Note: - Action shortcuts understood, e.g. action \"foo_bar_baz\" = fbb - Plugins are taken on first found basis - Flags also have shortcut versions (e.g. -hf for --helpfull) Example: myapp say_hello -hf log # all flags about logging $ myapp sh -lf 2 -gn Joe \u001b[2;38;5;5m07-25 16:06:14\u001b[0m [\u001b[38;5;2minfo \u001b[0m] greet \u001b[0m [\u001b[38;5;5msay_hello\u001b[0m] \u001b[1;32mname\u001b[0m=\u001b[1;38;5;11mJoe\u001b[0m \u001b[1;32mstore_log\u001b[0m=\u001b[1;38;5;11mNone\u001b[0m Hey, Joe! Further plugins for our myapp tool are now simply added into this directory Extending a Given Tool \u00a4 Higher order repos (dependend/derived on devapp) can add their own plugins for myapp , following the directory convention given above. Means: A package \"foo\" depending on devapp may add a /src(of_foo package)/bar/plugins/myapp_bar/bettergreeter.py so that the myapp tool has a better/more specialized greeter plugin. Derived package foo may also change the behaviour of the \"say_hello\" plugin of \"myapp\" by providing this module as well. Here is how you \"patch\" a given module, e.g. the project plugin of the ops tool, from a devapps derived package (here lc-python ): ~/ repos / lc - python / sr / o / p / ops_operators master ! 3 ? 1 \u276f pwd / home / gk / repos / lc - python / src / operators / plugins / ops_operators ~/ repos / lc - python / sr / o / p / ops_operators master ! 3 ? 1 \u276f cat project . py from devapp.plugins.ops_devapp.project import * class Flags ( Flags ): 'defined here, so that ops project -h works correctly' # (overwrite your stuff here) main = lambda : run_app ( run , flags = Flags ) . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Plugins"},{"location":"dev/plugins/#plugins","text":"Here is how you create or extend tools with plugins, callable like <toolname> <pluginname> [plugin flags] . Git Analogy In this terminology, \"git\" would be the name of the tool, \"checkout\" would be the name of the plugin.","title":"Plugins"},{"location":"dev/plugins/#defining-a-new-tool","text":"In your pyproject.toml add the name of the tool within the scripts section like so: [ tool . poetry . scripts ] myapp = \"devapp.tools.plugin:main\" This makes the tool available, with no plugins yet: $ poetry install Installing dependencies from lock file No dependencies to install or update Installing the current project: devapps (2023.06.20) $ myapp -h || true No plugins found. Create <namespace>/plugins/myapp_<namespace>/ folder(s), containing importable python modules. We are ready to create plugins: Plugins must reside within <package>/plugins/<tool_name>_<package_name>/ subdirectory of packages of the current repo. The package name at the end is to allow \"higher order repos\" to supply plugins with same name but changed behaviour. For the demo we pick the devapp package within this repo, devapps : $ mkdir -p \"src/devapp/plugins/myapp_devapp\" && ls \"src/devapp/plugins\" && pwd dev_devapp myapp_devapp ops_devapp /home/runner/work/devapps/devapps Then we create a demo plugin: $ cat src / devapp / plugins / myapp_devapp / say_hello . py \"\"\" Saying Hello \"\"\" from functools import partial from devapp.app import run_app , do , app from devapp.tools import FLG class Flags : 'Simple Hello World' autoshort = 'g' # all short forms for our flags prefixed with this class name : n = 'Who shall be greeted' d = 'User' # --------------------------------------------------------------------------- app def greet ( name ): print ( 'Hey, %s !' % name ) def run (): do ( greet , name = FLG . name ) main = partial ( run_app , run , flags = Flags ) The plugin is now available: $ myapp -h Usage: myapp ACTION [--flag[=value] ...] Available Action Plugins: - \u001b[1;32msay_hello\u001b[0m Help: myapp <action> <-h|--helpfull> [match] Note: - Action shortcuts understood, e.g. action \"foo_bar_baz\" = fbb - Plugins are taken on first found basis - Flags also have shortcut versions (e.g. -hf for --helpfull) Example: myapp say_hello -hf log # all flags about logging $ myapp sh -lf 2 -gn Joe \u001b[2;38;5;5m07-25 16:06:14\u001b[0m [\u001b[38;5;2minfo \u001b[0m] greet \u001b[0m [\u001b[38;5;5msay_hello\u001b[0m] \u001b[1;32mname\u001b[0m=\u001b[1;38;5;11mJoe\u001b[0m \u001b[1;32mstore_log\u001b[0m=\u001b[1;38;5;11mNone\u001b[0m Hey, Joe! Further plugins for our myapp tool are now simply added into this directory","title":"Defining a New Tool"},{"location":"dev/plugins/#extending-a-given-tool","text":"Higher order repos (dependend/derived on devapp) can add their own plugins for myapp , following the directory convention given above. Means: A package \"foo\" depending on devapp may add a /src(of_foo package)/bar/plugins/myapp_bar/bettergreeter.py so that the myapp tool has a better/more specialized greeter plugin. Derived package foo may also change the behaviour of the \"say_hello\" plugin of \"myapp\" by providing this module as well. Here is how you \"patch\" a given module, e.g. the project plugin of the ops tool, from a devapps derived package (here lc-python ): ~/ repos / lc - python / sr / o / p / ops_operators master ! 3 ? 1 \u276f pwd / home / gk / repos / lc - python / src / operators / plugins / ops_operators ~/ repos / lc - python / sr / o / p / ops_operators master ! 3 ? 1 \u276f cat project . py from devapp.plugins.ops_devapp.project import * class Flags ( Flags ): 'defined here, so that ops project -h works correctly' # (overwrite your stuff here) main = lambda : run_app ( run , flags = Flags ) . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Extending a Given Tool"},{"location":"dev/reload_on_change/","text":"Reload on Change \u00a4 You can have an arbitrary set of files being monitored in the background and have a reload signal sent on change. Your app stays in foreground, in order to debug. This watches all python files, in and below the current dir (the last 1 is for recursive - separator is ':'): while true ; do my_devapp --dirwatch .:*.py:1 ; done typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Reload on Change"},{"location":"dev/reload_on_change/#reload-on-change","text":"You can have an arbitrary set of files being monitored in the background and have a reload signal sent on change. Your app stays in foreground, in order to debug. This watches all python files, in and below the current dir (the last 1 is for recursive - separator is ':'): while true ; do my_devapp --dirwatch .:*.py:1 ; done typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Reload on Change"},{"location":"dev/tips/","text":"Developer Tips \u00a4 Assorted Tips for Developing on DevApps packages. Documentation \u00a4 Can be dynamic, with assertions. See docutools for more. CI/CD \u00a4 Failed to connect to bus: No such file or directory \u00a4 We are using the systemd user service to manage processes. This means there is a systemd process that runs as unprivileged user. The systemd user service is not used as commonly as the normal systemd process manager. For example Red Hat disabled the systemd user service in RHEL 7 (and thereby all distros that come from RHEL, like CentOS, Oracle Linux 7, Amazon Linux 2). However, RedHat has assured that running the systemd user service is supported as long as the service is re-enabled. This is how to start the systemd --user service for user with $UID= UID (the current user): As root create this unit file: # cat /etc/systemd/system/user@_UID_.service [Unit] Description=User Manager for UID %i After=systemd-user-sessions.service # These are present in the RHEL8 version of this file except that the unit is Requires, not Wants. # It's listed as Wants here so that if this file is used in a RHEL7 settings, it will not fail. # If a user upgrades from RHEL7 to RHEL8, this unit file will continue to work: After=user-runtime-dir@%i.service Wants=user-runtime-dir@%i.service [Service] LimitNOFILE=infinity LimitNPROC=infinity User=%i PAMName=systemd-user Type=notify # PermissionsStartOnly is deprecated and will be removed in future versions of systemd # This is required for all systemd versions prior to version 231 PermissionsStartOnly=true ExecStartPre=/bin/loginctl enable-linger %i ExecStart=-/lib/systemd/systemd --user Slice=user-%i.slice KillMode=mixed Delegate=yes TasksMax=infinity Restart=always RestartSec=15 [Install] WantedBy=default.target Then enable and start the unit. Run `ps -fww $(pgrep -f \"systemd --user\")` to verify success, then try re-init the project. ''' [Here](https://help.tableau.com/current/server-linux/en-us/systemd_user_service_error.htm) is more information. In order to debug failing jobs you'll want to run them in foreground, logged in as **another user**, then `su - gitlab-runner`. When you get this error at `systemctl --user status`: - loginctl enable-linger gitlab-runner # starts dbus - export XDG_RUNTIME_DIR=/run/user/$UID # in .bashrc of gitlab-runner ### Get exactly environ of runner - do `- poetry run env | tee | grep PATH > env` in the before-script section of .gitlab-ci.yml - then `set -a && source ./env && set +a` in your debug session, after `poetry shell`. ### Start gitlab-runner within nspawned Container This has isolation advantages and also you can instantly restart the whole machine, stopping every system service started at failed jobs. Example: `systemd-nspawn -D debian_filesystem -b` (filesystem e.g. from `docker pull debian`, then `docker export <containerId> | tar -xf .`) To run a whole CI/CD cycle, including docs: 1. `apt-get install make gcc wget curl mercurial locales lsof # for docutools` 1. install gitlab runner, give it a specific tag, which you configure in your `.gitlab-ci.yml` 1. install $HOME/miniconda3 1. Add `.config/pypoetry/auth.toml` and `config.toml` for artifactory 1. Configure base-index 1 for tmux (for literate programming docu) Now you can have commits in repos with the tag built by firing up the container: ```bash 1.~$ alias gitlab alias gitlab='sudo systemd-nspawn -D debian_filesystem -b -M gitlab' Stop the whole machine any time with ctrl-[[[ Manual Start of Runner \u00a4 Then you can manually run CI/CD jobs: Login as gitlab-runner user In home dir say: gitlab-runner --debug run Push a commit - watch it build Then stop and check if started as service, i.e. at nspawn container boot. Trouble Shooting To be able to login add console and pty/0 into etc/securetty If you change the runner user away from gitlab-runner, the unit file has the be adapted manually (not done by install routine) Ctrl-]]] powers the container off (immediate hard shutdown) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tips"},{"location":"dev/tips/#developer-tips","text":"Assorted Tips for Developing on DevApps packages.","title":"Developer Tips"},{"location":"dev/tips/#documentation","text":"Can be dynamic, with assertions. See docutools for more.","title":"Documentation"},{"location":"dev/tips/#cicd","text":"","title":"CI/CD"},{"location":"dev/tips/#failed-to-connect-to-bus-no-such-file-or-directory","text":"We are using the systemd user service to manage processes. This means there is a systemd process that runs as unprivileged user. The systemd user service is not used as commonly as the normal systemd process manager. For example Red Hat disabled the systemd user service in RHEL 7 (and thereby all distros that come from RHEL, like CentOS, Oracle Linux 7, Amazon Linux 2). However, RedHat has assured that running the systemd user service is supported as long as the service is re-enabled. This is how to start the systemd --user service for user with $UID= UID (the current user): As root create this unit file: # cat /etc/systemd/system/user@_UID_.service [Unit] Description=User Manager for UID %i After=systemd-user-sessions.service # These are present in the RHEL8 version of this file except that the unit is Requires, not Wants. # It's listed as Wants here so that if this file is used in a RHEL7 settings, it will not fail. # If a user upgrades from RHEL7 to RHEL8, this unit file will continue to work: After=user-runtime-dir@%i.service Wants=user-runtime-dir@%i.service [Service] LimitNOFILE=infinity LimitNPROC=infinity User=%i PAMName=systemd-user Type=notify # PermissionsStartOnly is deprecated and will be removed in future versions of systemd # This is required for all systemd versions prior to version 231 PermissionsStartOnly=true ExecStartPre=/bin/loginctl enable-linger %i ExecStart=-/lib/systemd/systemd --user Slice=user-%i.slice KillMode=mixed Delegate=yes TasksMax=infinity Restart=always RestartSec=15 [Install] WantedBy=default.target Then enable and start the unit. Run `ps -fww $(pgrep -f \"systemd --user\")` to verify success, then try re-init the project. ''' [Here](https://help.tableau.com/current/server-linux/en-us/systemd_user_service_error.htm) is more information. In order to debug failing jobs you'll want to run them in foreground, logged in as **another user**, then `su - gitlab-runner`. When you get this error at `systemctl --user status`: - loginctl enable-linger gitlab-runner # starts dbus - export XDG_RUNTIME_DIR=/run/user/$UID # in .bashrc of gitlab-runner ### Get exactly environ of runner - do `- poetry run env | tee | grep PATH > env` in the before-script section of .gitlab-ci.yml - then `set -a && source ./env && set +a` in your debug session, after `poetry shell`. ### Start gitlab-runner within nspawned Container This has isolation advantages and also you can instantly restart the whole machine, stopping every system service started at failed jobs. Example: `systemd-nspawn -D debian_filesystem -b` (filesystem e.g. from `docker pull debian`, then `docker export <containerId> | tar -xf .`) To run a whole CI/CD cycle, including docs: 1. `apt-get install make gcc wget curl mercurial locales lsof # for docutools` 1. install gitlab runner, give it a specific tag, which you configure in your `.gitlab-ci.yml` 1. install $HOME/miniconda3 1. Add `.config/pypoetry/auth.toml` and `config.toml` for artifactory 1. Configure base-index 1 for tmux (for literate programming docu) Now you can have commits in repos with the tag built by firing up the container: ```bash 1.~$ alias gitlab alias gitlab='sudo systemd-nspawn -D debian_filesystem -b -M gitlab' Stop the whole machine any time with ctrl-[[[","title":"Failed to connect to bus: No such file or directory"},{"location":"dev/tips/#manual-start-of-runner","text":"Then you can manually run CI/CD jobs: Login as gitlab-runner user In home dir say: gitlab-runner --debug run Push a commit - watch it build Then stop and check if started as service, i.e. at nspawn container boot. Trouble Shooting To be able to login add console and pty/0 into etc/securetty If you change the runner user away from gitlab-runner, the unit file has the be adapted manually (not done by install routine) Ctrl-]]] powers the container off (immediate hard shutdown) typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Manual Start of Runner"},{"location":"install/cicd/","text":"CI/CD Setup \u00a4 devapps repos may be hosted on internal package servers, then we use gitlab-runners to run CI/CD jobs. Note gitlab-runners are available for all major OS. devapps and derived packages builds are run on Linux only. Download the runner for your architecture Configure tokens and repository CI support as explained in the documentation In order for a runner to be able to build devapps we configure this in addition: Access to python versions via conda. \u00a4 With conda in /data/miniconda3 in this example: [gitlab-runner@doglr ~]$ cat /etc/systemd/system/gitlab-runner.service [Unit] Description = GitLab Runner After = syslog.target network.target ConditionFileIsExecutable = /usr/local/bin/gitlab-runner [Service] StartLimitInterval = 5 StartLimitBurst = 10 Environment = PATH=/data/miniconda3/bin:/data/miniconda3/envs/py38/bin:/root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin ExecStart = /usr/local/bin/gitlab-runner \"run\" \"--working-directory\" \"/mnt/volume_fra1_01/gitlab-runner\" \"--config\" \"/etc/gitlab-runner/config.toml\" \"--service\" \"gitlab-runner\" \"--syslog\" \"--user\" \"gitlab-runner\" Restart = always RestartSec = 120 [Install] WantedBy = multi-user.target Access to Private Artifactory \u00a4 [ gitlab-runner @ doglr pypoetry ] $ pwd / data / gitlab-runner / . config / pypoetry [ gitlab-runner @ doglr pypoetry ] $ cat auth . toml [http-basic] [http-basic.ax] username = \"klessinger\" password = \"xxxxxxxxxxxxxxxxxxxxxx\" # use the hashed one on third party machines [ gitlab-runner @ doglr pypoetry ] $ cat config . toml [repositories] [repositories.ax] url = \"https://artifacts.github.com/artifactory/api/pypi/pypi-ax-sources/simple/\" Tmux \u00a4 Configure the base index to be 1 for literate programming docu builds in $HOME/.tmux.conf : [gitlab-runner@doglr ~]$ cat .tmux.conf set-option -g base-index 1 set-window-option -g pane-base-index 1 Note If no tmux config file is found at an lp step, we automatically do create one, with the content above. git \u00a4 Setup git - some doc pre_process doc building steps do commit the changed pages: $ git config --global user.email gitlab-runner@<hostname> $ git config --global user.name \"gitlab-runner\" CI Files \u00a4 Adding Development Versions of Other Repos \u00a4 CI with development versions Should you temporarily need development versions of other repos of the devapps family you can do it like so in your .gitlab-ci.yml file: Example: dev. version of lc-doctools required: variables : PIP_CACHE_DIR : \"${CI_PROJECT_DIR}/.cache/pip\" # until we have a fixed version we use a development version: PYTHONPATH : \"${CI_PROJECT_DIR}/build/lc-doctools/src\" make_autodocs : \"true\" HGUSER : cibuild # for badges cache : key : \"${CI_JOB_NAME}\" key : lc_devapp_38 paths : - .cache/pip - .venv stages : #- quality - doctests # TODO: remove this cloning when version is fix: .install-deps-template : &install-deps before_script : - env # print the environ - mkdir build - git clone \"https://gitlab-ci-token:${CI_JOB_TOKEN}@mycompany.com/devapps/lc-doctools.git\" \"build/lc-doctools\" - poetry --version - poetry debug - poetry config virtualenvs.in-project true --local - poetry install -vv tags : (...) Warning There will be a rather prominent warning in your built documentation when you built using non released dependencies! typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Setting up CI/CD"},{"location":"install/cicd/#cicd-setup","text":"devapps repos may be hosted on internal package servers, then we use gitlab-runners to run CI/CD jobs. Note gitlab-runners are available for all major OS. devapps and derived packages builds are run on Linux only. Download the runner for your architecture Configure tokens and repository CI support as explained in the documentation In order for a runner to be able to build devapps we configure this in addition:","title":"CI/CD Setup"},{"location":"install/cicd/#access-to-python-versions-via-conda","text":"With conda in /data/miniconda3 in this example: [gitlab-runner@doglr ~]$ cat /etc/systemd/system/gitlab-runner.service [Unit] Description = GitLab Runner After = syslog.target network.target ConditionFileIsExecutable = /usr/local/bin/gitlab-runner [Service] StartLimitInterval = 5 StartLimitBurst = 10 Environment = PATH=/data/miniconda3/bin:/data/miniconda3/envs/py38/bin:/root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin ExecStart = /usr/local/bin/gitlab-runner \"run\" \"--working-directory\" \"/mnt/volume_fra1_01/gitlab-runner\" \"--config\" \"/etc/gitlab-runner/config.toml\" \"--service\" \"gitlab-runner\" \"--syslog\" \"--user\" \"gitlab-runner\" Restart = always RestartSec = 120 [Install] WantedBy = multi-user.target","title":"Access to python versions via conda."},{"location":"install/cicd/#access-to-private-artifactory","text":"[ gitlab-runner @ doglr pypoetry ] $ pwd / data / gitlab-runner / . config / pypoetry [ gitlab-runner @ doglr pypoetry ] $ cat auth . toml [http-basic] [http-basic.ax] username = \"klessinger\" password = \"xxxxxxxxxxxxxxxxxxxxxx\" # use the hashed one on third party machines [ gitlab-runner @ doglr pypoetry ] $ cat config . toml [repositories] [repositories.ax] url = \"https://artifacts.github.com/artifactory/api/pypi/pypi-ax-sources/simple/\"","title":"Access to Private Artifactory"},{"location":"install/cicd/#tmux","text":"Configure the base index to be 1 for literate programming docu builds in $HOME/.tmux.conf : [gitlab-runner@doglr ~]$ cat .tmux.conf set-option -g base-index 1 set-window-option -g pane-base-index 1 Note If no tmux config file is found at an lp step, we automatically do create one, with the content above.","title":"Tmux"},{"location":"install/cicd/#git","text":"Setup git - some doc pre_process doc building steps do commit the changed pages: $ git config --global user.email gitlab-runner@<hostname> $ git config --global user.name \"gitlab-runner\"","title":"git"},{"location":"install/cicd/#ci-files","text":"","title":"CI Files"},{"location":"install/cicd/#adding-development-versions-of-other-repos","text":"CI with development versions Should you temporarily need development versions of other repos of the devapps family you can do it like so in your .gitlab-ci.yml file: Example: dev. version of lc-doctools required: variables : PIP_CACHE_DIR : \"${CI_PROJECT_DIR}/.cache/pip\" # until we have a fixed version we use a development version: PYTHONPATH : \"${CI_PROJECT_DIR}/build/lc-doctools/src\" make_autodocs : \"true\" HGUSER : cibuild # for badges cache : key : \"${CI_JOB_NAME}\" key : lc_devapp_38 paths : - .cache/pip - .venv stages : #- quality - doctests # TODO: remove this cloning when version is fix: .install-deps-template : &install-deps before_script : - env # print the environ - mkdir build - git clone \"https://gitlab-ci-token:${CI_JOB_TOKEN}@mycompany.com/devapps/lc-doctools.git\" \"build/lc-doctools\" - poetry --version - poetry debug - poetry config virtualenvs.in-project true --local - poetry install -vv tags : (...) Warning There will be a rather prominent warning in your built documentation when you built using non released dependencies! typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Adding Development Versions of Other Repos"},{"location":"install/dev_inst/","text":"Development Install \u00a4 In order to develop applications or projects derived on devapps (or on devapps itself): clone this or the derived application's repository configure artifactory credentials (for packages referred to in your pyproject.toml file) as explained before pip install poetry if you not yet have the build system (does not need to match your target python version) run poetry install It takes around a minute for poetry to resolve all dependencies. After this you can enter the virtual environment via poetry shell with all required packages and commands available: Cmd Output $ poetry shell $ ops -h $ poetry shell Virtual environment already activated: \u001b[34m/home/runner/miniconda3/envs/devapps_py3.7 \u001b[39m$ $ ops -h Usage: ops ACTION [--flag[=value] ...] Available Action Plugins: - \u001b[1m\u001b[32mcontainer_build \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mcontainer_pull \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mfs_build \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32minfra_aws_cloud \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32minfra_digital_ocean \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32minfra_hetzner_cloud \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mkubectl \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mlife_cycle \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mlog_view \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mpkgs \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mproject \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mrun \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32msystem \u001b[0m\u001b[39m\u001b[49mHelp: ops <action> <-h|--helpfull> [match] Note: - Action shortcuts understood, e.g. action \"foo_bar_baz\" = fbb - Plugins are taken on first found basis - Flags also have shortcut versions (e.g. -hf for --helpfull) Example: ops container_build -hf log # all flags about logging Co-Developing Dependent Packages \u00a4 If you want to develop not only on the poetry installed package but also on others than using a PYTHONPATH based trick is convenient: Clone the other repositories under development as well and export $PYTHONPATH like so: $ ( lc-python-Z3KKTfGL-py3.7 ) 2 .lc-python$ type ldp ldp is aliased to `export PYTHONPATH=\"/home/joe/repos/devapps/src:/home/joe/repos/lc-doctools/src\"; cd /home/joe/repos/lc-python; poetry shell' The devapps dependent lc-python environment will now use e.g. devapps from the checkout and not from the configured package. Scripts from cloned repos The PYTHONPATH trick works also when those other packages ship with scripts, e.g. the doc script from lc-doctools , or ops from devapps . You do need to have at least one version with such a script in your pyproject.yml , so that the script is installed and found in your $PATH within the virtual environment. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Installing A Development Version"},{"location":"install/dev_inst/#development-install","text":"In order to develop applications or projects derived on devapps (or on devapps itself): clone this or the derived application's repository configure artifactory credentials (for packages referred to in your pyproject.toml file) as explained before pip install poetry if you not yet have the build system (does not need to match your target python version) run poetry install It takes around a minute for poetry to resolve all dependencies. After this you can enter the virtual environment via poetry shell with all required packages and commands available: Cmd Output $ poetry shell $ ops -h $ poetry shell Virtual environment already activated: \u001b[34m/home/runner/miniconda3/envs/devapps_py3.7 \u001b[39m$ $ ops -h Usage: ops ACTION [--flag[=value] ...] Available Action Plugins: - \u001b[1m\u001b[32mcontainer_build \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mcontainer_pull \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mfs_build \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32minfra_aws_cloud \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32minfra_digital_ocean \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32minfra_hetzner_cloud \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mkubectl \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mlife_cycle \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mlog_view \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mpkgs \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mproject \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32mrun \u001b[0m\u001b[39m\u001b[49m - \u001b[1m\u001b[32msystem \u001b[0m\u001b[39m\u001b[49mHelp: ops <action> <-h|--helpfull> [match] Note: - Action shortcuts understood, e.g. action \"foo_bar_baz\" = fbb - Plugins are taken on first found basis - Flags also have shortcut versions (e.g. -hf for --helpfull) Example: ops container_build -hf log # all flags about logging","title":"Development Install"},{"location":"install/dev_inst/#co-developing-dependent-packages","text":"If you want to develop not only on the poetry installed package but also on others than using a PYTHONPATH based trick is convenient: Clone the other repositories under development as well and export $PYTHONPATH like so: $ ( lc-python-Z3KKTfGL-py3.7 ) 2 .lc-python$ type ldp ldp is aliased to `export PYTHONPATH=\"/home/joe/repos/devapps/src:/home/joe/repos/lc-doctools/src\"; cd /home/joe/repos/lc-python; poetry shell' The devapps dependent lc-python environment will now use e.g. devapps from the checkout and not from the configured package. Scripts from cloned repos The PYTHONPATH trick works also when those other packages ship with scripts, e.g. the doc script from lc-doctools , or ops from devapps . You do need to have at least one version with such a script in your pyproject.yml , so that the script is installed and found in your $PATH within the virtual environment. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Co-Developing Dependent Packages"},{"location":"install/prod_inst/","text":"Installing DevApps Derived Packages \u00a4 Here is how applications derived from devapps are installed. It is actually a normal \"pip install\" - but you have to configure the package server, which may be hosted on private Artifactory server. You will never pip install devapps standalone in a project but it will be installed as a requirement of derived packages. Since installation steps are the same we lay them out here and refer to here from derived packages and applications. Package Server \u00a4 Here are the different ways to configure a private package server. With pip \u00a4 For a normal pip install do this: $ url = \"https:// $user : $pass @artifacts.mycompany.com/artifactory/api/pypi/pypi/simple/\" Then make sure your intended Python environment is active, see Python installation : $ pip install --user --index-url \" $url \" devapps With pipx \u00a4 $ pip install --user pipx # if you not yet have it $ url = \"https:// $user : $pass @artifacts.mycompany.com/artifactory/api/pypi/pypi/simple/\" $ pipx install --index-url \" $url \" devapps # --verbose With poetry \u00a4 Poetry is the build and dependency management system, which all devapps are built with. This way enables you to run e.g. tests, since all development and test dependencies will be installed as well. See here regarding repo access configuration. Here the steps: Configure Credentials \u00a4 Configure artifactory credentials for python packages like so: Example: $ poetry config repositories.ax \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple/\" # using an *encrypted* password, will be stored in plain text w/o password manager: $ poetry config http-basic.ax myusername xP6xCi3xxxxxxxxxxxxxxxxxxxx pyproject.toml: [[tool.poetry.source]] name = \"ax\" url = \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple\" secondary = true Or manually: $ cat $HOME/.config/pypoetry/auth.toml # on Linux. OSX / Windows: See poetry docs [http-basic] [http-basic.ax] username = \"myusername\" # use your encrypted password: password = \"aP6oxxxxxxxxxxxxxxxxxxxxuZSyr\" $ cat $HOME/.config/pypoetry/config.toml [repositories] [repositories.ax] url = \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple/\" Then, as for a development install (i.e. with development packages installed). $ poetry install typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"DevApps Packages"},{"location":"install/prod_inst/#installing-devapps-derived-packages","text":"Here is how applications derived from devapps are installed. It is actually a normal \"pip install\" - but you have to configure the package server, which may be hosted on private Artifactory server. You will never pip install devapps standalone in a project but it will be installed as a requirement of derived packages. Since installation steps are the same we lay them out here and refer to here from derived packages and applications.","title":"Installing DevApps Derived Packages"},{"location":"install/prod_inst/#package-server","text":"Here are the different ways to configure a private package server.","title":"Package Server"},{"location":"install/prod_inst/#with-pip","text":"For a normal pip install do this: $ url = \"https:// $user : $pass @artifacts.mycompany.com/artifactory/api/pypi/pypi/simple/\" Then make sure your intended Python environment is active, see Python installation : $ pip install --user --index-url \" $url \" devapps","title":"With pip"},{"location":"install/prod_inst/#with-pipx","text":"$ pip install --user pipx # if you not yet have it $ url = \"https:// $user : $pass @artifacts.mycompany.com/artifactory/api/pypi/pypi/simple/\" $ pipx install --index-url \" $url \" devapps # --verbose","title":"With pipx"},{"location":"install/prod_inst/#with-poetry","text":"Poetry is the build and dependency management system, which all devapps are built with. This way enables you to run e.g. tests, since all development and test dependencies will be installed as well. See here regarding repo access configuration. Here the steps:","title":"With poetry"},{"location":"install/prod_inst/#configure-credentials","text":"Configure artifactory credentials for python packages like so: Example: $ poetry config repositories.ax \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple/\" # using an *encrypted* password, will be stored in plain text w/o password manager: $ poetry config http-basic.ax myusername xP6xCi3xxxxxxxxxxxxxxxxxxxx pyproject.toml: [[tool.poetry.source]] name = \"ax\" url = \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple\" secondary = true Or manually: $ cat $HOME/.config/pypoetry/auth.toml # on Linux. OSX / Windows: See poetry docs [http-basic] [http-basic.ax] username = \"myusername\" # use your encrypted password: password = \"aP6oxxxxxxxxxxxxxxxxxxxxuZSyr\" $ cat $HOME/.config/pypoetry/config.toml [repositories] [repositories.ax] url = \"https://artifacts.mycompany.com/artifactory/api/pypi/pypi-ax-sources/simple/\" Then, as for a development install (i.e. with development packages installed). $ poetry install typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Configure Credentials"},{"location":"install/python/","text":"Installing Python \u00a4 Python is the base requirement for any devapp. This base package requires minimum Python 3.7 but derived apps may require higher versions. Python Environment We highly recommend to not use the Python of your host system but install within a dedicated environment. To install Python versions, there are many options, incl. miniconda , pyenv or packages of your distribution. . Subsequently we explain the two ways of installing and activating a specific Python version, which do not require root permissions and are contained within directories. Conda \u00a4 Conda or its lighther variant Miniconda is a binary package dependency management and deployment system. It allows to install not only Python in any version under one base environment but also other resources, e.g. redis, nodejs or other databases, w/o \"spamming\" your filesystem outside of the base directory. This can be done conflict free, within prefixes ( environments ). Conda is comparable to the homebrew packaging system but not dependent on a fixed directory within /usr/local . A localized homebrew is very similar to Conda (but restricted to OSX only, i.e. no option for us). Installation is simple and described here . On Linux: curl 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh' -O install.sh chmod +x install.sh ./install.sh -b # installs non interactively into $HOME/miniconda3 # makes the conda command available (consider an alias within e.g. your .bashrc): source miniconda3/etc/profile.d/conda.sh # we can now install any python version within the base environment like so: conda create -n py38 python = 3 .8 # and activate, not leaving your current shell process: conda activate py38 Activation not required to run Like with homebrew, any installed binary can be executed without previous activation of its environment. Example: $HOME/miniconda3/envs/myredis/bin/redis-server will work. Pyenv \u00a4 If you \"only\" require Python, then pyenv is a more lightweight way than conda. # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.8 pyenv install 3 .8 # make it available globally pyenv global system 3 .8 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Python"},{"location":"install/python/#installing-python","text":"Python is the base requirement for any devapp. This base package requires minimum Python 3.7 but derived apps may require higher versions. Python Environment We highly recommend to not use the Python of your host system but install within a dedicated environment. To install Python versions, there are many options, incl. miniconda , pyenv or packages of your distribution. . Subsequently we explain the two ways of installing and activating a specific Python version, which do not require root permissions and are contained within directories.","title":"Installing Python"},{"location":"install/python/#conda","text":"Conda or its lighther variant Miniconda is a binary package dependency management and deployment system. It allows to install not only Python in any version under one base environment but also other resources, e.g. redis, nodejs or other databases, w/o \"spamming\" your filesystem outside of the base directory. This can be done conflict free, within prefixes ( environments ). Conda is comparable to the homebrew packaging system but not dependent on a fixed directory within /usr/local . A localized homebrew is very similar to Conda (but restricted to OSX only, i.e. no option for us). Installation is simple and described here . On Linux: curl 'https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh' -O install.sh chmod +x install.sh ./install.sh -b # installs non interactively into $HOME/miniconda3 # makes the conda command available (consider an alias within e.g. your .bashrc): source miniconda3/etc/profile.d/conda.sh # we can now install any python version within the base environment like so: conda create -n py38 python = 3 .8 # and activate, not leaving your current shell process: conda activate py38 Activation not required to run Like with homebrew, any installed binary can be executed without previous activation of its environment. Example: $HOME/miniconda3/envs/myredis/bin/redis-server will work.","title":"Conda"},{"location":"install/python/#pyenv","text":"If you \"only\" require Python, then pyenv is a more lightweight way than conda. # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.8 pyenv install 3 .8 # make it available globally pyenv global system 3 .8 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Pyenv"},{"location":"interactive/","text":"Interactive FZF Apps \u00a4 Parameters \u00a4 App Level \u00a4 Mandatory \u00a4 Optional \u00a4 str:default_menu [Alphabetically first menu class name]: Which menu to present at app start. str:name (str): No logical purpose. Menu Level \u00a4 Mandatory \u00a4 callable->list:produce : Must return raw data as list. Typically list of dicts. Understanding the Application \u00a4 Follow class Streams within the pipeline module. Most important is the stream starting with the Menu items producer (the items stream). Debugging \u00a4 <appname> -hf | grep d_tmp shows you where the application log files are written. Loglevel via -ll / --log_level In pipeline.py ensure the debug mode is set, so that each stream map operator function is wrapped via wrap function, and therefore logged. Interactive Debugging \u00a4 pp items in breakpoints within functions of the items stream will print the items with entries reduced to just a few. Use Fzf.dbgstop when debugging stuff while fzf is on. Use wrap function in pipeline builder Tips \u00a4 Sometimes it is useful to set the fzf.cmd to sth like 'sleep 10000' just before the popen_fzf - then you still have std out and in. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Interactive FZF Apps"},{"location":"interactive/#interactive-fzf-apps","text":"","title":"Interactive FZF Apps"},{"location":"interactive/#parameters","text":"","title":"Parameters"},{"location":"interactive/#app-level","text":"","title":"App Level"},{"location":"interactive/#mandatory","text":"","title":"Mandatory"},{"location":"interactive/#optional","text":"str:default_menu [Alphabetically first menu class name]: Which menu to present at app start. str:name (str): No logical purpose.","title":"Optional"},{"location":"interactive/#menu-level","text":"","title":"Menu Level"},{"location":"interactive/#mandatory_1","text":"callable->list:produce : Must return raw data as list. Typically list of dicts.","title":"Mandatory"},{"location":"interactive/#understanding-the-application","text":"Follow class Streams within the pipeline module. Most important is the stream starting with the Menu items producer (the items stream).","title":"Understanding the Application"},{"location":"interactive/#debugging","text":"<appname> -hf | grep d_tmp shows you where the application log files are written. Loglevel via -ll / --log_level In pipeline.py ensure the debug mode is set, so that each stream map operator function is wrapped via wrap function, and therefore logged.","title":"Debugging"},{"location":"interactive/#interactive-debugging","text":"pp items in breakpoints within functions of the items stream will print the items with entries reduced to just a few. Use Fzf.dbgstop when debugging stuff while fzf is on. Use wrap function in pipeline builder","title":"Interactive Debugging"},{"location":"interactive/#tips","text":"Sometimes it is useful to set the fzf.cmd to sth like 'sleep 10000' just before the popen_fzf - then you still have std out and in. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Tips"},{"location":"interactive/fzf/","text":"FZF Mode of Operation \u00a4 No Preview \u00a4 echo -e 'hello\\nworld' | fzf We call the echo command \" Items Process \", subsequently - it produces (by default) line separated data chunks: Not shown are non filter/select interactions of the user via the TTY, where the user can mark one ore more items (using up/down keys by default) change the rendering behaviour while fzf is running complete fzf (i.e. have it exit early), with information about what the user entered Note Subsequently we connect user and items process directly to fzf. Streaming Items Process \u00a4 fzf does not wait until items process is exitting but renders as items arrive: ( echo hello ; sleep 1 ; echo world ) | fzf With Preview \u00a4 fzf can start a preview process (PP) at item mark or filter time fzf displays what the process produces on its stdout, within its preview pane With Streaming Preview \u00a4 As for items process, fzf does also not wait for the preview process to exit - but starts outputting as soon as data is arriving: Max One Preview Process At A Time If the user marks/filters a different item then fzf kills any possibly running preview process - and starts a new one. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"FZF Mode of Operation"},{"location":"interactive/fzf/#fzf-mode-of-operation","text":"","title":"FZF Mode of Operation"},{"location":"interactive/fzf/#no-preview","text":"echo -e 'hello\\nworld' | fzf We call the echo command \" Items Process \", subsequently - it produces (by default) line separated data chunks: Not shown are non filter/select interactions of the user via the TTY, where the user can mark one ore more items (using up/down keys by default) change the rendering behaviour while fzf is running complete fzf (i.e. have it exit early), with information about what the user entered Note Subsequently we connect user and items process directly to fzf.","title":"No Preview"},{"location":"interactive/fzf/#streaming-items-process","text":"fzf does not wait until items process is exitting but renders as items arrive: ( echo hello ; sleep 1 ; echo world ) | fzf","title":"Streaming Items Process"},{"location":"interactive/fzf/#with-preview","text":"fzf can start a preview process (PP) at item mark or filter time fzf displays what the process produces on its stdout, within its preview pane","title":"With Preview"},{"location":"interactive/fzf/#with-streaming-preview","text":"As for items process, fzf does also not wait for the preview process to exit - but starts outputting as soon as data is arriving: Max One Preview Process At A Time If the user marks/filters a different item then fzf kills any possibly running preview process - and starts a new one. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"With Streaming Preview"},{"location":"projects/","text":"Projects \u00a4 During the previous sections you learned how to install the application libs and executables. After you installed Python and a DevApps application package (with its dependencies) either in pip(x) production or poetry development mode, you can now create and maintain projects, i.e. directories, where additional project specific files are kept. These can be... config files additional code specific executables secret stores log and data directories ...and so on. The directory of projects is arbitrary, e.g. $HOME/myproject In real projects it is typically tracked in large parts via git. Hint When you develop on a product package , then that directory can be kept identical with the product repo directory itself, while developping. The devapps base repo installs a tool ( ops ), which assists at creation and normalization of projects. Before we explain that tool, we first highlight the basics of DevApps resources . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"About"},{"location":"projects/#projects","text":"During the previous sections you learned how to install the application libs and executables. After you installed Python and a DevApps application package (with its dependencies) either in pip(x) production or poetry development mode, you can now create and maintain projects, i.e. directories, where additional project specific files are kept. These can be... config files additional code specific executables secret stores log and data directories ...and so on. The directory of projects is arbitrary, e.g. $HOME/myproject In real projects it is typically tracked in large parts via git. Hint When you develop on a product package , then that directory can be kept identical with the product repo directory itself, while developping. The devapps base repo installs a tool ( ops ), which assists at creation and normalization of projects. Before we explain that tool, we first highlight the basics of DevApps resources . typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Projects"},{"location":"projects/resource_definitions/","text":"Resource Definitions \u00a4 Here the mechanics for defining resources. Those must be defined in <namespace>/operations/resources.py files. Hint Check existing resources.py files in other devapp repos for further examples. # find devapp's resources files: l = \" $( python -c 'import devapp; print(devapp.__file__)' ) \" cd \" $( dirname $l ) \" find . -print | grep resources.py Postinstall Functions \u00a4 Resource with a post_inst step (after conda install the package). Provide all the install steps, incl. those for all provides within a post_inst function, also for all provides. def my_post_inst ( rsc , install = False , verify = False , api = None , ** kw ): \"\"\"Install steps, also for all provides\"\"\" d = api . rsc_path ( rsc ) or '' fn_cfg = d + '/../config/elasticsearch.yml' cfg = read_file ( fn_cfg , dflt = '' ) if verify : ( ... ) # check done (also check if post_inst function was run) if install : ( ... ) # run postinstall def foo ( ** kw ): \"\"\"Just deliver the wrapper params for a provides here, no installation\"\"\" return { 'env' : { 'fooenvparam' : 'bar' }, 'cmd' : 'foo -bar' } def elasticsearch ( ** kw ): \"\"\"Just deliver the wrapper params here, no installation\"\"\" return 'elasticsearch -flag1 ..' class rsc : class elasticsearch : d = True # disabled, only installed with -irm elastic cmd = elasticsearch # name of bin/<wrapper> conda_pkg = 'elasticsearch-bin' conda_chan = 'anaconda-platform' port = 9200 port_wait_timeout = 20 post_inst = my_post_inst # postinstall function after conda install systemd = 'elasticsearch' # it is a service -> unit can be created provides = [ foo ] # optional other executables typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Resource Definitions"},{"location":"projects/resource_definitions/#resource-definitions","text":"Here the mechanics for defining resources. Those must be defined in <namespace>/operations/resources.py files. Hint Check existing resources.py files in other devapp repos for further examples. # find devapp's resources files: l = \" $( python -c 'import devapp; print(devapp.__file__)' ) \" cd \" $( dirname $l ) \" find . -print | grep resources.py","title":"Resource Definitions"},{"location":"projects/resource_definitions/#postinstall-functions","text":"Resource with a post_inst step (after conda install the package). Provide all the install steps, incl. those for all provides within a post_inst function, also for all provides. def my_post_inst ( rsc , install = False , verify = False , api = None , ** kw ): \"\"\"Install steps, also for all provides\"\"\" d = api . rsc_path ( rsc ) or '' fn_cfg = d + '/../config/elasticsearch.yml' cfg = read_file ( fn_cfg , dflt = '' ) if verify : ( ... ) # check done (also check if post_inst function was run) if install : ( ... ) # run postinstall def foo ( ** kw ): \"\"\"Just deliver the wrapper params for a provides here, no installation\"\"\" return { 'env' : { 'fooenvparam' : 'bar' }, 'cmd' : 'foo -bar' } def elasticsearch ( ** kw ): \"\"\"Just deliver the wrapper params here, no installation\"\"\" return 'elasticsearch -flag1 ..' class rsc : class elasticsearch : d = True # disabled, only installed with -irm elastic cmd = elasticsearch # name of bin/<wrapper> conda_pkg = 'elasticsearch-bin' conda_chan = 'anaconda-platform' port = 9200 port_wait_timeout = 20 post_inst = my_post_inst # postinstall function after conda install systemd = 'elasticsearch' # it is a service -> unit can be created provides = [ foo ] # optional other executables typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Postinstall Functions"},{"location":"projects/resources/","text":"Resources \u00a4 DevApps should work cross OS and distributions and often depend on interplaying with processes and tools not written in Python - sometimes significantly customized, like Node-RED for the lc-python based Low Code application family. Hint Such tools might be (command line) utilities like rg and fzf but also databases like redis or mysql. This section explains which technologies and tools DevApps provides and why - in order to deliver a 'just works by default' user experience. Batteries included but Replaceable There is no need for the user to use these technologies, when there are better suited alternatives in his working environment, e.g. native packages or containers. Preliminary Considerations \u00a4 Applications are typically distributed over the filesystem in various places: The actual binaries and libraries of the app itself The dependencies of the app (libraries) The app configuration, which might include custom code Logs, data, temporary files And the same for all resources, e.g. databases which the app requires to run. The specific ways how resources and their dependencies are arranged within the system depends on the OS (Linux vs BSDs vs OSx vs Windows) but even within OS distributions and versions. Devapps based applications give the user the option to keep all that together: \u251c\u2500\u2500 app_python libs_and_executables (products) \u2502 \u2514\u2500\u2500 <in the virtual python environment> \u2502 \u251c\u2500\u2500 app_project_folder \u2502 \u251c\u2500\u2500 bin \u2502 \u2502 \u2514\u2500\u2500 <e.g. redis-server start wrapper> \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 tmp \u2502 \u251c\u2500\u2500 <usually within HOME folder> \u2502 \u2514\u2500\u2500 work \u2502 \u2514\u2500\u2500 third party app_resources (conda, filesystems) \u251c\u2500\u2500 conda env:_resource_one \u2502 \u2514\u2500\u2500 <e.g. redis> \u251c\u2500\u2500 conda env:_resource_two \u2502 \u2514\u2500\u2500 <e.g. mysql> \u2514\u2500\u2500 fs \u2514\u2500\u2500 <complete filesystem for resource 3> In development mode, i.e. when you work with a clone of a specific devapps based repo, then the project folder and the poetry environment of the devapps lib under development may be identical the resources directory may also be contained within that directory. Often more practical is, to keep those elsewhere, for re-usability reasons Technology Choices / Resource Types \u00a4 Currently devapp manages the following resource types: Filesystem \u00a4 This allows to pull whole filesystems layer by layer from container reqistries and have them put together locally using tar, without the need for root permissions or the presence of container tools. Tools and daemons within those filesystems are usable, often w/o the need to run within the prefix (e.g. $LD_LIBRARY_PATH is often enough, i.e. then w/o chroot permissions). Conda \u00a4 As already mentioned, binary packages from the Anaconda ecosystem allow to install resources, 100% compliant with the goals stated above: Distribution independent Cross platform binary packages Installable in different versions W/o root permissions W/o affecting the file system outside a configurable prefix. After installation the resources are completely contained within $HOME/miniconda3/envs/<resource name> and can be deleted by removing the envs/<resource name> directories. Downsides: Not all is available yet, the ecosystem is smaller, compared to big distributions like Debian Less reliable long term maintenance - much smaller community. Currently the third party conda forge channel maintains the biggest packages index. Conda is the technology of choice for third party tools and services For the batteries included but replaceable [1] approach, we consider the advantages to outweigh the disadvantages and therefore the devapps included tool to install resources is using Conda as primary packaging system. [1] e.g. in production environments In the next chapter you'll learn how the ops project tool allows to create projects and have resources installed. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Resources"},{"location":"projects/resources/#resources","text":"DevApps should work cross OS and distributions and often depend on interplaying with processes and tools not written in Python - sometimes significantly customized, like Node-RED for the lc-python based Low Code application family. Hint Such tools might be (command line) utilities like rg and fzf but also databases like redis or mysql. This section explains which technologies and tools DevApps provides and why - in order to deliver a 'just works by default' user experience. Batteries included but Replaceable There is no need for the user to use these technologies, when there are better suited alternatives in his working environment, e.g. native packages or containers.","title":"Resources"},{"location":"projects/resources/#preliminary-considerations","text":"Applications are typically distributed over the filesystem in various places: The actual binaries and libraries of the app itself The dependencies of the app (libraries) The app configuration, which might include custom code Logs, data, temporary files And the same for all resources, e.g. databases which the app requires to run. The specific ways how resources and their dependencies are arranged within the system depends on the OS (Linux vs BSDs vs OSx vs Windows) but even within OS distributions and versions. Devapps based applications give the user the option to keep all that together: \u251c\u2500\u2500 app_python libs_and_executables (products) \u2502 \u2514\u2500\u2500 <in the virtual python environment> \u2502 \u251c\u2500\u2500 app_project_folder \u2502 \u251c\u2500\u2500 bin \u2502 \u2502 \u2514\u2500\u2500 <e.g. redis-server start wrapper> \u2502 \u251c\u2500\u2500 conf \u2502 \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 tmp \u2502 \u251c\u2500\u2500 <usually within HOME folder> \u2502 \u2514\u2500\u2500 work \u2502 \u2514\u2500\u2500 third party app_resources (conda, filesystems) \u251c\u2500\u2500 conda env:_resource_one \u2502 \u2514\u2500\u2500 <e.g. redis> \u251c\u2500\u2500 conda env:_resource_two \u2502 \u2514\u2500\u2500 <e.g. mysql> \u2514\u2500\u2500 fs \u2514\u2500\u2500 <complete filesystem for resource 3> In development mode, i.e. when you work with a clone of a specific devapps based repo, then the project folder and the poetry environment of the devapps lib under development may be identical the resources directory may also be contained within that directory. Often more practical is, to keep those elsewhere, for re-usability reasons","title":"Preliminary Considerations"},{"location":"projects/resources/#technology-choices-resource-types","text":"Currently devapp manages the following resource types:","title":"Technology Choices / Resource Types"},{"location":"projects/resources/#filesystem","text":"This allows to pull whole filesystems layer by layer from container reqistries and have them put together locally using tar, without the need for root permissions or the presence of container tools. Tools and daemons within those filesystems are usable, often w/o the need to run within the prefix (e.g. $LD_LIBRARY_PATH is often enough, i.e. then w/o chroot permissions).","title":"Filesystem"},{"location":"projects/resources/#conda","text":"As already mentioned, binary packages from the Anaconda ecosystem allow to install resources, 100% compliant with the goals stated above: Distribution independent Cross platform binary packages Installable in different versions W/o root permissions W/o affecting the file system outside a configurable prefix. After installation the resources are completely contained within $HOME/miniconda3/envs/<resource name> and can be deleted by removing the envs/<resource name> directories. Downsides: Not all is available yet, the ecosystem is smaller, compared to big distributions like Debian Less reliable long term maintenance - much smaller community. Currently the third party conda forge channel maintains the biggest packages index. Conda is the technology of choice for third party tools and services For the batteries included but replaceable [1] approach, we consider the advantages to outweigh the disadvantages and therefore the devapps included tool to install resources is using Conda as primary packaging system. [1] e.g. in production environments In the next chapter you'll learn how the ops project tool allows to create projects and have resources installed. typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Conda"},{"location":"projects/usage/","text":"The ops project Tool \u00a4 After installation of devapps you have the ops project command available 1 . The tool allows to install and maintain projects and resources. Project \u00a4 To use the tool, first activate your environment via poetry shell in case of a development installation (virtual environ activation in case of a pip(x) based install). Verification: $ poetry debug info \u001b[1mPoetry \u001b[0m\u001b[34m\u001b[49mVersion\u001b[39m: \u001b[32m1.1.15 \u001b[34mPython\u001b[39m: \u001b[32m3.7.12 \u001b[1m\u001b[39mVirtualenv \u001b[0m\u001b[34m\u001b[49mPython\u001b[39m: \u001b[32m3.7.12 \u001b[34mImplementation\u001b[39m: \u001b[32mCPython \u001b[34mPath\u001b[39m: \u001b[32m/home/runner/miniconda3/envs/devapps_py3.7 \u001b[34mValid\u001b[39m: \u001b[32mTrue \u001b[1m\u001b[39mSystem \u001b[0m\u001b[34m\u001b[49mPlatform\u001b[39m: \u001b[32mlinux \u001b[34mOS\u001b[39m: \u001b[32mposix \u001b[34mPython\u001b[39m: \u001b[32m/home/runner/miniconda3/envs/devapps_py3.7 \u001b[39m Let's now create a (new) directory for the project: $ mkdir $HOME/myproject && cd $HOME/myproject && ls -lta total 8 drwxr-xr-x 2 runner docker 4096 Jul 25 16:06 . drwxr-x--- 17 runner docker 4096 Jul 25 16:06 .. Resources \u00a4 devapps (and derived packages) contain resource defining python modules named resources.py . Resources of devapps \u00a4 Here are the resources defined in devapps . They are required for running the tests but also provide some tools: Cmd Output $ ops project --list_resources_files $ ops project --list_resources_files \u001b[2m\u001b[38;5;5m07-25 16:06:21\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Directories [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mconda_prefix\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mfs_dir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3/fs(default) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:21\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Listing Defined Resources [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:21\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] details [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mjson\u001b[0m\u001b[39m\u001b[49m=[ \u001b[90m \u001b[39m{ \u001b[90m \u001b[94m\"bin_name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"conda_chan\"\u001b[39m:\u001b[90m \u001b[33m\"conda-forge\"\u001b[39m, \u001b[90m \u001b[94m\"conda_pkg\"\u001b[39m:\u001b[90m \u001b[33m\"git fzf jq ripgrep fd-find httpie htop tmux\"\u001b[39m, \u001b[90m \u001b[94m\"disabled\"\u001b[39m:\u001b[90m \u001b[94mfalse\u001b[39m, \u001b[90m \u001b[94m\"doc\"\u001b[39m:\u001b[90m \u001b[33m\"\"\u001b[39m, \u001b[90m \u001b[94m\"host_conf_dir\"\u001b[39m:\u001b[90m \u001b[33m\"$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"installed\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m, \u001b[90m \u001b[94m\"module\"\u001b[39m:\u001b[90m \u001b[33m\"devapp\"\u001b[39m, \u001b[90m \u001b[94m\"module_dir\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/work/devapps/devapps/src/devapp\"\u001b[39m, \u001b[90m \u001b[94m\"name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"path\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/miniconda3/envs/lc_tools/bin\"\u001b[39m, \u001b[90m \u001b[94m\"provides\"\u001b[39m:\u001b[90m \u001b[39m[ \u001b[90m \u001b[33m\"git\"\u001b[39m, \u001b[90m \u001b[33m\"fzf\"\u001b[39m, \u001b[90m \u001b[33m\"jq\"\u001b[39m, \u001b[90m \u001b[33m\"rg\"\u001b[39m, \u001b[90m \u001b[33m\"fd\"\u001b[39m, \u001b[90m \u001b[33m\"http\"\u001b[39m, \u001b[90m \u001b[33m\"htop\"\u001b[39m, \u001b[90m \u001b[33m\"tmux\" \u001b[90m \u001b[39m], \u001b[90m \u001b[94m\"run\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"verify_present\"\u001b[39m:\u001b[90m \u001b[33m\"verify_tools\" \u001b[90m \u001b[39m}, \u001b[90m \u001b[39m{ \u001b[90m \u001b[94m\"bin_name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools_kf\"\u001b[39m, \u001b[90m \u001b[94m\"conda_chan\"\u001b[39m:\u001b[90m \u001b[33m\"kalefranz\"\u001b[39m, \u001b[90m \u001b[94m\"conda_pkg\"\u001b[39m:\u001b[90m \u001b[33m\"httpd\"\u001b[39m, \u001b[90m \u001b[94m\"disabled\"\u001b[39m:\u001b[90m \u001b[94mfalse\u001b[39m, \u001b[90m \u001b[94m\"doc\"\u001b[39m:\u001b[90m \u001b[33m\"\"\u001b[39m, \u001b[90m \u001b[94m\"host_conf_dir\"\u001b[39m:\u001b[90m \u001b[33m\"$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf\"\u001b[39m, \u001b[90m \u001b[94m\"installed\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m, \u001b[90m \u001b[94m\"module\"\u001b[39m:\u001b[90m \u001b[33m\"devapp\"\u001b[39m, \u001b[90m \u001b[94m\"module_dir\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/work/devapps/devapps/src/devapp\"\u001b[39m, \u001b[90m \u001b[94m\"name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools_kf\"\u001b[39m, \u001b[90m \u001b[94m\"path\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/miniconda3/envs/lc_tools_kf/bin\"\u001b[39m, \u001b[90m \u001b[94m\"provides\"\u001b[39m:\u001b[90m \u001b[39m[ \u001b[90m \u001b[33m\"rotatelogs\" \u001b[90m \u001b[39m], \u001b[90m \u001b[94m\"verify_present\"\u001b[39m:\u001b[90m \u001b[33m\"verify_tools\" \u001b[90m \u001b[39m}, \u001b[90m \u001b[39m{ \u001b[90m \u001b[94m\"bin_name\"\u001b[39m:\u001b[90m \u001b[33m\"redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"cmd\"\u001b[39m:\u001b[90m \u001b[33m\"redis-server\"\u001b[39m, \u001b[90m \u001b[94m\"disabled\"\u001b[39m:\u001b[90m \u001b[94mfalse\u001b[39m, \u001b[90m \u001b[94m\"doc\"\u001b[39m:\u001b[90m \u001b[33m\"\"\u001b[39m, \u001b[90m \u001b[94m\"host_conf_dir\"\u001b[39m:\u001b[90m \u001b[33m\"$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"installed\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m, \u001b[90m \u001b[94m\"module\"\u001b[39m:\u001b[90m \u001b[33m\"devapp\"\u001b[39m, \u001b[90m \u001b[94m\"module_dir\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/work/devapps/devapps/src/devapp\"\u001b[39m, \u001b[90m \u001b[94m\"name\"\u001b[39m:\u001b[90m \u001b[33m\"redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"path\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/miniconda3/envs/redis_server/bin\"\u001b[39m, \u001b[90m \u001b[94m\"pkg\"\u001b[39m:\u001b[90m \u001b[33m\"redis-server\"\u001b[39m, \u001b[90m \u001b[94m\"port\"\u001b[39m:\u001b[90m \u001b[94m6379\u001b[39m, \u001b[90m \u001b[94m\"provides\"\u001b[39m:\u001b[90m \u001b[39m[ \u001b[90m \u001b[33m\"redis-server\"\u001b[39m, \u001b[90m \u001b[33m\"redis-cli\" \u001b[90m \u001b[39m], \u001b[90m \u001b[94m\"run\"\u001b[39m:\u001b[90m \u001b[33m\"redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"systemd\"\u001b[39m:\u001b[90m \u001b[33m\"redis-server\" \u001b[90m \u001b[39m} ] [ \u001b[90m \u001b[33m\" i lc_tools ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux']\"\u001b[39m, \u001b[90m \u001b[33m\" i lc_tools_kf ['rotatelogs']\"\u001b[39m, \u001b[90m \u001b[33m\"s i redis-server ['redis-server', 'redis-cli']\" \u001b[39m] More Tools devapps based applications usually define more, e.g. databases, more tools or log targets. Batteries Included - but Replaceable DevApps' resource management is only meant as a convenience machinery to quickly get up projects or dev setups up and running. In production you'll have more distributed setups anyway, installed e.g. via Ansible and/or Container Orchestrators. Means: You do not need to have those resources managed as shown below - we install \"normal\" versions, packaged as Conda packages and use standard config options (see previous chapter why). Project Init \u00a4 Via the --init_at flag you set up a new project, within the given directory, plus its resources: Cmd Output $ ops project --init_at . --port_offset 2000 --force $ tree -L 2 $ ops project --init_at . --port_offset 2000 --force \u001b[2m\u001b[38;5;5m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Directories [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mconda_prefix\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mfs_dir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3/fs(default) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[1m\u001b[38;5;124mwarning \u001b[0m\u001b[39m\u001b[49m] Installing resources [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mresources\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m[{'bin_name': 'lc_tools', 'conda_chan': 'conda-forge', 'conda_pkg': 'git fzf jq ripgrep fd-find httpie htop tmux', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools', 'path': '/home/runner/miniconda3/envs/lc_tools/bin', 'provides': ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux'], 'run': 'lc_tools', 'verify_present': 'verify_tools'}, {'bin_name': 'lc_tools_kf', 'conda_chan': 'kalefranz', 'conda_pkg': 'httpd', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools_kf', 'path': '/home/runner/miniconda3/envs/lc_tools_kf/bin', 'provides': ['rotatelogs'], 'verify_present': 'verify_tools'}, {'bin_name': 'redis_server', 'cmd': 'redis-server', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'redis_server', 'path': '/home/runner/miniconda3/envs/redis_server/bin', 'pkg': 'redis-server', 'port': 6379, 'provides': ['redis-server', 'redis-cli'], 'run': 'redis_server', 'systemd': 'redis-server'}] \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] create_project_dirs [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/bin \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/data \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/log \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/work \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/conf \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/tmp \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/build \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] git_init [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0m\u001b[39m\u001b[49m-ne \u001b[38;5;240mbin/git: line 34: MC: command not found \u001b[33mhint: Using 'master' as the name for the initial branch. This default branch name hint: is subject to change. To configure the initial branch name to use in all hint: of your new repositories, which will suppress this warning, call: hint: hint: \u001b[39m \u001b[33mgit config --global init.defaultBranch <name> hint: hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and hint: 'development'. The just-created branch can be renamed via this command: hint: hint: \u001b[39m \u001b[33mgit branch -m <name> \u001b[39mInitialized empty Git repository in /home/runner/myproject/.git/ -ne $ tree -L 2 . \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 fd \u2502 \u251c\u2500\u2500 fzf \u2502 \u251c\u2500\u2500 git \u2502 \u251c\u2500\u2500 htop \u2502 \u251c\u2500\u2500 http \u2502 \u251c\u2500\u2500 jq \u2502 \u251c\u2500\u2500 redis-cli \u2502 \u251c\u2500\u2500 redis-server \u2502 \u251c\u2500\u2500 rg \u2502 \u251c\u2500\u2500 rotatelogs \u2502 \u2514\u2500\u2500 tmux \u251c\u2500\u2500 build \u251c\u2500\u2500 conf \u251c\u2500\u2500 data \u251c\u2500\u2500 log \u251c\u2500\u2500 tmp \u2502 \u2514\u2500\u2500 tmux \u2514\u2500\u2500 work 9 directories, 11 files As you can see, we created start files in the bin subdirectory of the project directory, pointing to where the actual binaries had been installed. We did set a global port_offset , which affects any port of listening resources started. Controlling Resources Installation There are few options regarding which resources are to be installed, where. See the output of the -h regarding this: Cmd Output $ ops p -h $ ops p -h \u001b[1m\u001b[38;5;11mCreating A Project With Resources \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[0m\u001b[39m\u001b[49mThis plugin is helper for creating a project directory, incl. required local resources. Your system remains unchanged, except <project_dir> and <conda_prefix>. It provides an \u001b[38;5;5minstall\u001b[39m action (implicitely by providing the --init_resource_match or --init_at switch) Default action is: \u001b[38;5;5mlist\u001b[39m (show installable resources, -m <match> filters). At install we will (re-)initialize a \"project_dir\", at location given with --init_at (default: '.'), incl: \u001b[38;5;5m\u2756 \u001b[39mInstalling available resources, like databases and tools within a given directory (conda_prefix) \u001b[38;5;5m\u2756 \u001b[39mCreating resource start wrappers in <project_dir>/bin \u001b[38;5;5m\u2756 \u001b[39mGenerating default config when required \u001b[38;5;5m\u2756 \u001b[39mOptionally generating systemd unit files (e.g. via: --init_create_all_units) \u001b[38;5;5m\u2756 \u001b[39mInstances support: export <name>_instances=x before running and you'll get x systemd units created, for startable commands. \u001b[38;5;5m Example: export client_instances=10; ops p -irm client -icau (Name of a resource: ops p [-m <match>]) \u2756 \u001b[39mAny other parametrization: Via environ variables Check key environ vars in list output and also doc text. Privilege escalation is not required for any of these steps. Main command line flags [matching \u001b[1m\u001b[32mops_devapp.project\u001b[0m\u001b[39m\u001b[49m]: \u001b[32mappc \u001b[1m\u001b[33madd_post_process_cmd \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mAdd this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[32mcp \u001b[1m\u001b[33mconda_prefix \u001b[0m\u001b[31m\u001b[49m/home/runner/miniconda3 \u001b[38;5;245m Resources install location, except filesystem based ones. Env vars resolved. Aliases: - local|l: <project_dir>/conda - default|d: $HOME/miniconda3 (default path of conda) - current|c: Any current conda_prefix set when running. Note: Installing resources outside the project keeps the project relocatable and resources reusable for other products. \u001b[32mdamsu \u001b[1m\u001b[33mdelete_all_matching_service_unit_files \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mThis removes all matching unit files calling devapp service wrappers. Say \"service\" to match all \u001b[32mdi \u001b[1m\u001b[33mdev_install \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mSet the project up in developer mode - incl. make and poetry file machinery \u001b[32memrf \u001b[1m\u001b[33medit_matching_resource_file \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mOpen resource files in $EDITOR, matching given string in their content \u001b[32mf \u001b[1m\u001b[33mforce \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mAssume y on all questions. Required when started w/o a tty \u001b[32mfr \u001b[1m\u001b[33mforce_reinstall \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mDo not only install resources detected uninstalled but reinstall all \u001b[32mfd \u001b[1m\u001b[33mfs_dir \u001b[0m\u001b[31m\u001b[49mdefault \u001b[38;5;245m Filesystem based resource location. Env vars resolved. Aliases: - local|l: <project_dir>/fs - default|d: $HOME/miniconda3/fs (default path of conda) - conda|c: Within conda_prefix/fs \u001b[32mia \u001b[1m\u001b[33minit_at \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mSet up project in given directory. env vars / relative dirs supported. Sets install action implicitly \u001b[32micau \u001b[1m\u001b[33minit_create_all_units \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mIf set we create unit files for ALL service type resources \u001b[32micuf \u001b[1m\u001b[33minit_create_unit_files \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mList service unit files you want to have created for systemctl --user. \u001b[38;5;241mValid: Entries in rsc.provides, rsc.cmd or rsc.exe (i.e. the filename of the wrapper in bin dir). Not: rsc.name. \u001b[32mirm \u001b[1m\u001b[33minit_resource_match \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mLike resource match but implies install action \u001b[32mi \u001b[1m\u001b[33minstall \u001b[0m\u001b[33m\u001b[49mACTION \u001b[38;5;245mInstall \u001b[32mis \u001b[1m\u001b[33minstall_state \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mshow install state infos \u001b[32ml \u001b[1m\u001b[33mlist ACTION* \u001b[0m\u001b[38;5;245m\u001b[49mShow available definition files. \u001b[32mlrf \u001b[1m\u001b[33mlist_resources_files \u001b[0m\u001b[33m\u001b[49mACTION \u001b[38;5;245mAlias for list action \u001b[32m \u001b[1m\u001b[33mlog_resources_fully \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mAlways output all settings of resources when logging \u001b[32mm \u001b[1m\u001b[33mresource_match \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mProvide a match string for actions. Examples: -irm \"redis, hub\" or -irm '!mysql, !redis' (! negates). \u001b[32ms \u001b[1m\u001b[33msystem \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mSet to a server for system mode API (e.g. lc hub(s)) \u001b[36m-hf [match string]\u001b[39m: List \u001b[1m\u001b[36mALL\u001b[0m\u001b[39m\u001b[49m (matching) flags. E.g. -hf or -hf log. More CLI flags More control flags are only accessible via --helpfull <match> ( -hf ): Try ops p -hf log_level , ops p -hf port (...) Project initialization flags In the example above, a --port_offset=2000 flag was given, determining the start parameters written into the redis wrapper: $ bin/redis-server bin/redis-server: line 35 : MC: command not found 4103 :C 25 Jul 2023 16 :06:25.162 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 4103 :C 25 Jul 2023 16 :06:25.162 # Redis version=7.0.12, bits=64, commit=22906652, modified=1, pid=4103, just started 4103 :C 25 Jul 2023 16 :06:25.162 # Configuration loaded 4103 :M 25 Jul 2023 16 :06:25.163 * monotonic clock: POSIX clock_gettime _._ _.- `` __ '' -._ _.- `` ` . ` _. '' -._ Redis 7 .0.12 ( 22906652 /1 ) 64 bit .- `` .- ``` . ``` \\/ _.,_ '' -._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|' ` _.- '| Port: 8379 | `-._ `._ / _.-' | PID: 4103 ` -._ ` -._ ` -./ _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | https://redis.io `-._ `-._`-.__.-' _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | `-._ `-._`-.__.-' _.- ' _.-' ` -._ ` -.__.- ' _.-' ` -._ _.- ' `-.__.-' 4103 :M 25 Jul 2023 16 :06:25.163 # Server initialized 4103 :M 25 Jul 2023 16 :06:25.163 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect. 4103 :M 25 Jul 2023 16 :06:25.164 # WARNING You have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never'). 4103 :M 25 Jul 2023 16 :06:25.164 * Ready to accept connections Idempotency If you need to re-parametrize the project (e.g. set different port offsets) then run ops project --init_at again and have new start wrappers created. Unit Files \u00a4 We do not try to manage the live cycle of services but leave that to systemd (available on all Linux major distributions). The --init_create_unit_files=<name of daemon resource> will create a unit file after installing the resource itself: Creating a resource incl. unit file Cmd Output $ ops project --init_at = . --init_create_unit_files = redis-server --force $ ops project --init_at=. --init_create_unit_files=redis-server --force \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Directories [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mconda_prefix\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mfs_dir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3/fs(default) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] verify_systemctl_availability [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0m\u001b[39m\u001b[49msystemctl is /usr/bin/systemctl \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[1m\u001b[38;5;124mwarning \u001b[0m\u001b[39m\u001b[49m] Installing resources [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mresources\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m[{'bin_name': 'lc_tools', 'conda_chan': 'conda-forge', 'conda_pkg': 'git fzf jq ripgrep fd-find httpie htop tmux', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools', 'path': '/home/runner/miniconda3/envs/lc_tools/bin', 'provides': ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux'], 'run': 'lc_tools', 'verify_present': 'verify_tools'}, {'bin_name': 'lc_tools_kf', 'conda_chan': 'kalefranz', 'conda_pkg': 'httpd', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools_kf', 'path': '/home/runner/miniconda3/envs/lc_tools_kf/bin', 'provides': ['rotatelogs'], 'verify_present': 'verify_tools'}, {'bin_name': 'redis_server', 'cmd': 'redis-server', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'redis_server', 'path': '/home/runner/miniconda3/envs/redis_server/bin', 'pkg': 'redis-server', 'port': 6379, 'provides': ['redis-server', 'redis-cli'], 'run': 'redis_server', 'systemd': 'redis-server'}] \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] create_project_dirs [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] have written unit file [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mfn\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/.config/systemd/user/redis-server-myproject.service \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] have written unit file [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mfn\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/.config/systemd/user/redis-server-myproject.service \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] git_init [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] All project file created. [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Enabling systemd user service units. [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] systemd --user available, calling daemon-reload [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Done init. [\u001b[38;5;5mproject\u001b[39m] You control the service using systemctl --user : Cmd Output $ systemctl --user --no-pager start redis-server-myproject $ systemctl --user --no-pager status redis-server-myproject $ systemctl --user --no-pager stop redis-server-myproject $ systemctl --user --no-pager start redis-server-myproject $ systemctl --user --no-pager status redis-server-myproject \u001b[1m\u001b[32m\u25cf\u001b[0m\u001b[39m\u001b[49m redis-server-myproject.service - redis-server myproject redis-server Loaded: loaded (/home/runner/.config/systemd/user/redis-server-myproject.service; disabled; vendor preset: enabled) Active: \u001b[1m\u001b[32mactive (running)\u001b[0m\u001b[39m\u001b[49m since Tue 2023-07-25 16:06:26 UTC; 36ms ago Main PID: 4150 (bash) Tasks: 6 (limit: 8307) Memory: 7.9M CPU: 9ms CGroup: /user.slice/user-1001.slice/user@1001.service/app.slice/redis-server-myproject.service \u251c\u25004150 bash /home/runner/myproject/bin/redis-server \u2514\u25004152 \"redis-server *:6379\" \"\" \"\" \"\" \"\" \"\" Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u202679. Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026zed Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:26.4\u2026 Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:26.4\u2026 Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026.12 Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026nds Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026 Mb Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026 0. Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026nds Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026ons Hint: Some lines were ellipsized, use -l to show in full. $ systemctl --user --no-pager stop redis-server-myproject Hint In order to install unit files for ALL service type resources, you can supply --init_create_all_units , alternatively. Technically project is implemented as a plugin of the ops tool. \u21a9 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Usage"},{"location":"projects/usage/#the-ops-project-tool","text":"After installation of devapps you have the ops project command available 1 . The tool allows to install and maintain projects and resources.","title":"The ops project Tool"},{"location":"projects/usage/#project","text":"To use the tool, first activate your environment via poetry shell in case of a development installation (virtual environ activation in case of a pip(x) based install). Verification: $ poetry debug info \u001b[1mPoetry \u001b[0m\u001b[34m\u001b[49mVersion\u001b[39m: \u001b[32m1.1.15 \u001b[34mPython\u001b[39m: \u001b[32m3.7.12 \u001b[1m\u001b[39mVirtualenv \u001b[0m\u001b[34m\u001b[49mPython\u001b[39m: \u001b[32m3.7.12 \u001b[34mImplementation\u001b[39m: \u001b[32mCPython \u001b[34mPath\u001b[39m: \u001b[32m/home/runner/miniconda3/envs/devapps_py3.7 \u001b[34mValid\u001b[39m: \u001b[32mTrue \u001b[1m\u001b[39mSystem \u001b[0m\u001b[34m\u001b[49mPlatform\u001b[39m: \u001b[32mlinux \u001b[34mOS\u001b[39m: \u001b[32mposix \u001b[34mPython\u001b[39m: \u001b[32m/home/runner/miniconda3/envs/devapps_py3.7 \u001b[39m Let's now create a (new) directory for the project: $ mkdir $HOME/myproject && cd $HOME/myproject && ls -lta total 8 drwxr-xr-x 2 runner docker 4096 Jul 25 16:06 . drwxr-x--- 17 runner docker 4096 Jul 25 16:06 ..","title":"Project"},{"location":"projects/usage/#resources","text":"devapps (and derived packages) contain resource defining python modules named resources.py .","title":"Resources"},{"location":"projects/usage/#resources-of-devapps","text":"Here are the resources defined in devapps . They are required for running the tests but also provide some tools: Cmd Output $ ops project --list_resources_files $ ops project --list_resources_files \u001b[2m\u001b[38;5;5m07-25 16:06:21\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Directories [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mconda_prefix\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mfs_dir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3/fs(default) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:21\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Listing Defined Resources [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:21\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] details [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mjson\u001b[0m\u001b[39m\u001b[49m=[ \u001b[90m \u001b[39m{ \u001b[90m \u001b[94m\"bin_name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"conda_chan\"\u001b[39m:\u001b[90m \u001b[33m\"conda-forge\"\u001b[39m, \u001b[90m \u001b[94m\"conda_pkg\"\u001b[39m:\u001b[90m \u001b[33m\"git fzf jq ripgrep fd-find httpie htop tmux\"\u001b[39m, \u001b[90m \u001b[94m\"disabled\"\u001b[39m:\u001b[90m \u001b[94mfalse\u001b[39m, \u001b[90m \u001b[94m\"doc\"\u001b[39m:\u001b[90m \u001b[33m\"\"\u001b[39m, \u001b[90m \u001b[94m\"host_conf_dir\"\u001b[39m:\u001b[90m \u001b[33m\"$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"installed\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m, \u001b[90m \u001b[94m\"module\"\u001b[39m:\u001b[90m \u001b[33m\"devapp\"\u001b[39m, \u001b[90m \u001b[94m\"module_dir\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/work/devapps/devapps/src/devapp\"\u001b[39m, \u001b[90m \u001b[94m\"name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"path\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/miniconda3/envs/lc_tools/bin\"\u001b[39m, \u001b[90m \u001b[94m\"provides\"\u001b[39m:\u001b[90m \u001b[39m[ \u001b[90m \u001b[33m\"git\"\u001b[39m, \u001b[90m \u001b[33m\"fzf\"\u001b[39m, \u001b[90m \u001b[33m\"jq\"\u001b[39m, \u001b[90m \u001b[33m\"rg\"\u001b[39m, \u001b[90m \u001b[33m\"fd\"\u001b[39m, \u001b[90m \u001b[33m\"http\"\u001b[39m, \u001b[90m \u001b[33m\"htop\"\u001b[39m, \u001b[90m \u001b[33m\"tmux\" \u001b[90m \u001b[39m], \u001b[90m \u001b[94m\"run\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools\"\u001b[39m, \u001b[90m \u001b[94m\"verify_present\"\u001b[39m:\u001b[90m \u001b[33m\"verify_tools\" \u001b[90m \u001b[39m}, \u001b[90m \u001b[39m{ \u001b[90m \u001b[94m\"bin_name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools_kf\"\u001b[39m, \u001b[90m \u001b[94m\"conda_chan\"\u001b[39m:\u001b[90m \u001b[33m\"kalefranz\"\u001b[39m, \u001b[90m \u001b[94m\"conda_pkg\"\u001b[39m:\u001b[90m \u001b[33m\"httpd\"\u001b[39m, \u001b[90m \u001b[94m\"disabled\"\u001b[39m:\u001b[90m \u001b[94mfalse\u001b[39m, \u001b[90m \u001b[94m\"doc\"\u001b[39m:\u001b[90m \u001b[33m\"\"\u001b[39m, \u001b[90m \u001b[94m\"host_conf_dir\"\u001b[39m:\u001b[90m \u001b[33m\"$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf\"\u001b[39m, \u001b[90m \u001b[94m\"installed\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m, \u001b[90m \u001b[94m\"module\"\u001b[39m:\u001b[90m \u001b[33m\"devapp\"\u001b[39m, \u001b[90m \u001b[94m\"module_dir\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/work/devapps/devapps/src/devapp\"\u001b[39m, \u001b[90m \u001b[94m\"name\"\u001b[39m:\u001b[90m \u001b[33m\"lc_tools_kf\"\u001b[39m, \u001b[90m \u001b[94m\"path\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/miniconda3/envs/lc_tools_kf/bin\"\u001b[39m, \u001b[90m \u001b[94m\"provides\"\u001b[39m:\u001b[90m \u001b[39m[ \u001b[90m \u001b[33m\"rotatelogs\" \u001b[90m \u001b[39m], \u001b[90m \u001b[94m\"verify_present\"\u001b[39m:\u001b[90m \u001b[33m\"verify_tools\" \u001b[90m \u001b[39m}, \u001b[90m \u001b[39m{ \u001b[90m \u001b[94m\"bin_name\"\u001b[39m:\u001b[90m \u001b[33m\"redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"cmd\"\u001b[39m:\u001b[90m \u001b[33m\"redis-server\"\u001b[39m, \u001b[90m \u001b[94m\"disabled\"\u001b[39m:\u001b[90m \u001b[94mfalse\u001b[39m, \u001b[90m \u001b[94m\"doc\"\u001b[39m:\u001b[90m \u001b[33m\"\"\u001b[39m, \u001b[90m \u001b[94m\"host_conf_dir\"\u001b[39m:\u001b[90m \u001b[33m\"$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"installed\"\u001b[39m:\u001b[90m \u001b[94mtrue\u001b[39m, \u001b[90m \u001b[94m\"module\"\u001b[39m:\u001b[90m \u001b[33m\"devapp\"\u001b[39m, \u001b[90m \u001b[94m\"module_dir\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/work/devapps/devapps/src/devapp\"\u001b[39m, \u001b[90m \u001b[94m\"name\"\u001b[39m:\u001b[90m \u001b[33m\"redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"path\"\u001b[39m:\u001b[90m \u001b[33m\"/home/runner/miniconda3/envs/redis_server/bin\"\u001b[39m, \u001b[90m \u001b[94m\"pkg\"\u001b[39m:\u001b[90m \u001b[33m\"redis-server\"\u001b[39m, \u001b[90m \u001b[94m\"port\"\u001b[39m:\u001b[90m \u001b[94m6379\u001b[39m, \u001b[90m \u001b[94m\"provides\"\u001b[39m:\u001b[90m \u001b[39m[ \u001b[90m \u001b[33m\"redis-server\"\u001b[39m, \u001b[90m \u001b[33m\"redis-cli\" \u001b[90m \u001b[39m], \u001b[90m \u001b[94m\"run\"\u001b[39m:\u001b[90m \u001b[33m\"redis_server\"\u001b[39m, \u001b[90m \u001b[94m\"systemd\"\u001b[39m:\u001b[90m \u001b[33m\"redis-server\" \u001b[90m \u001b[39m} ] [ \u001b[90m \u001b[33m\" i lc_tools ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux']\"\u001b[39m, \u001b[90m \u001b[33m\" i lc_tools_kf ['rotatelogs']\"\u001b[39m, \u001b[90m \u001b[33m\"s i redis-server ['redis-server', 'redis-cli']\" \u001b[39m] More Tools devapps based applications usually define more, e.g. databases, more tools or log targets. Batteries Included - but Replaceable DevApps' resource management is only meant as a convenience machinery to quickly get up projects or dev setups up and running. In production you'll have more distributed setups anyway, installed e.g. via Ansible and/or Container Orchestrators. Means: You do not need to have those resources managed as shown below - we install \"normal\" versions, packaged as Conda packages and use standard config options (see previous chapter why).","title":"Resources of devapps"},{"location":"projects/usage/#project-init","text":"Via the --init_at flag you set up a new project, within the given directory, plus its resources: Cmd Output $ ops project --init_at . --port_offset 2000 --force $ tree -L 2 $ ops project --init_at . --port_offset 2000 --force \u001b[2m\u001b[38;5;5m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Directories [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mconda_prefix\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mfs_dir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3/fs(default) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[1m\u001b[38;5;124mwarning \u001b[0m\u001b[39m\u001b[49m] Installing resources [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mresources\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m[{'bin_name': 'lc_tools', 'conda_chan': 'conda-forge', 'conda_pkg': 'git fzf jq ripgrep fd-find httpie htop tmux', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools', 'path': '/home/runner/miniconda3/envs/lc_tools/bin', 'provides': ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux'], 'run': 'lc_tools', 'verify_present': 'verify_tools'}, {'bin_name': 'lc_tools_kf', 'conda_chan': 'kalefranz', 'conda_pkg': 'httpd', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools_kf', 'path': '/home/runner/miniconda3/envs/lc_tools_kf/bin', 'provides': ['rotatelogs'], 'verify_present': 'verify_tools'}, {'bin_name': 'redis_server', 'cmd': 'redis-server', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'redis_server', 'path': '/home/runner/miniconda3/envs/redis_server/bin', 'pkg': 'redis-server', 'port': 6379, 'provides': ['redis-server', 'redis-cli'], 'run': 'redis_server', 'systemd': 'redis-server'}] \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] create_project_dirs [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/bin \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/data \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/log \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/work \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/conf \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/tmp \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] creating [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mdir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject/build \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:22\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] git_init [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0m\u001b[39m\u001b[49m-ne \u001b[38;5;240mbin/git: line 34: MC: command not found \u001b[33mhint: Using 'master' as the name for the initial branch. This default branch name hint: is subject to change. To configure the initial branch name to use in all hint: of your new repositories, which will suppress this warning, call: hint: hint: \u001b[39m \u001b[33mgit config --global init.defaultBranch <name> hint: hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and hint: 'development'. The just-created branch can be renamed via this command: hint: hint: \u001b[39m \u001b[33mgit branch -m <name> \u001b[39mInitialized empty Git repository in /home/runner/myproject/.git/ -ne $ tree -L 2 . \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 fd \u2502 \u251c\u2500\u2500 fzf \u2502 \u251c\u2500\u2500 git \u2502 \u251c\u2500\u2500 htop \u2502 \u251c\u2500\u2500 http \u2502 \u251c\u2500\u2500 jq \u2502 \u251c\u2500\u2500 redis-cli \u2502 \u251c\u2500\u2500 redis-server \u2502 \u251c\u2500\u2500 rg \u2502 \u251c\u2500\u2500 rotatelogs \u2502 \u2514\u2500\u2500 tmux \u251c\u2500\u2500 build \u251c\u2500\u2500 conf \u251c\u2500\u2500 data \u251c\u2500\u2500 log \u251c\u2500\u2500 tmp \u2502 \u2514\u2500\u2500 tmux \u2514\u2500\u2500 work 9 directories, 11 files As you can see, we created start files in the bin subdirectory of the project directory, pointing to where the actual binaries had been installed. We did set a global port_offset , which affects any port of listening resources started. Controlling Resources Installation There are few options regarding which resources are to be installed, where. See the output of the -h regarding this: Cmd Output $ ops p -h $ ops p -h \u001b[1m\u001b[38;5;11mCreating A Project With Resources \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u001b[0m\u001b[39m\u001b[49mThis plugin is helper for creating a project directory, incl. required local resources. Your system remains unchanged, except <project_dir> and <conda_prefix>. It provides an \u001b[38;5;5minstall\u001b[39m action (implicitely by providing the --init_resource_match or --init_at switch) Default action is: \u001b[38;5;5mlist\u001b[39m (show installable resources, -m <match> filters). At install we will (re-)initialize a \"project_dir\", at location given with --init_at (default: '.'), incl: \u001b[38;5;5m\u2756 \u001b[39mInstalling available resources, like databases and tools within a given directory (conda_prefix) \u001b[38;5;5m\u2756 \u001b[39mCreating resource start wrappers in <project_dir>/bin \u001b[38;5;5m\u2756 \u001b[39mGenerating default config when required \u001b[38;5;5m\u2756 \u001b[39mOptionally generating systemd unit files (e.g. via: --init_create_all_units) \u001b[38;5;5m\u2756 \u001b[39mInstances support: export <name>_instances=x before running and you'll get x systemd units created, for startable commands. \u001b[38;5;5m Example: export client_instances=10; ops p -irm client -icau (Name of a resource: ops p [-m <match>]) \u2756 \u001b[39mAny other parametrization: Via environ variables Check key environ vars in list output and also doc text. Privilege escalation is not required for any of these steps. Main command line flags [matching \u001b[1m\u001b[32mops_devapp.project\u001b[0m\u001b[39m\u001b[49m]: \u001b[32mappc \u001b[1m\u001b[33madd_post_process_cmd \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mAdd this to all commands which have systemd service units. Intended for output redirection. Not applied when stdout is a tty. Example: -appc='2>&1 | rotatelogs -e -n1 \"$logfile\" 1M' ($logfile defined in wrapper -> use single quotes). Tip: Use rotatelogs only on powers of 10 - spotted problems with 200M. Use 100M or 1G in that case. \u001b[32mcp \u001b[1m\u001b[33mconda_prefix \u001b[0m\u001b[31m\u001b[49m/home/runner/miniconda3 \u001b[38;5;245m Resources install location, except filesystem based ones. Env vars resolved. Aliases: - local|l: <project_dir>/conda - default|d: $HOME/miniconda3 (default path of conda) - current|c: Any current conda_prefix set when running. Note: Installing resources outside the project keeps the project relocatable and resources reusable for other products. \u001b[32mdamsu \u001b[1m\u001b[33mdelete_all_matching_service_unit_files \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mThis removes all matching unit files calling devapp service wrappers. Say \"service\" to match all \u001b[32mdi \u001b[1m\u001b[33mdev_install \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mSet the project up in developer mode - incl. make and poetry file machinery \u001b[32memrf \u001b[1m\u001b[33medit_matching_resource_file \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mOpen resource files in $EDITOR, matching given string in their content \u001b[32mf \u001b[1m\u001b[33mforce \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mAssume y on all questions. Required when started w/o a tty \u001b[32mfr \u001b[1m\u001b[33mforce_reinstall \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mDo not only install resources detected uninstalled but reinstall all \u001b[32mfd \u001b[1m\u001b[33mfs_dir \u001b[0m\u001b[31m\u001b[49mdefault \u001b[38;5;245m Filesystem based resource location. Env vars resolved. Aliases: - local|l: <project_dir>/fs - default|d: $HOME/miniconda3/fs (default path of conda) - conda|c: Within conda_prefix/fs \u001b[32mia \u001b[1m\u001b[33minit_at \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mSet up project in given directory. env vars / relative dirs supported. Sets install action implicitly \u001b[32micau \u001b[1m\u001b[33minit_create_all_units \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mIf set we create unit files for ALL service type resources \u001b[32micuf \u001b[1m\u001b[33minit_create_unit_files \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mList service unit files you want to have created for systemctl --user. \u001b[38;5;241mValid: Entries in rsc.provides, rsc.cmd or rsc.exe (i.e. the filename of the wrapper in bin dir). Not: rsc.name. \u001b[32mirm \u001b[1m\u001b[33minit_resource_match \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mLike resource match but implies install action \u001b[32mi \u001b[1m\u001b[33minstall \u001b[0m\u001b[33m\u001b[49mACTION \u001b[38;5;245mInstall \u001b[32mis \u001b[1m\u001b[33minstall_state \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mshow install state infos \u001b[32ml \u001b[1m\u001b[33mlist ACTION* \u001b[0m\u001b[38;5;245m\u001b[49mShow available definition files. \u001b[32mlrf \u001b[1m\u001b[33mlist_resources_files \u001b[0m\u001b[33m\u001b[49mACTION \u001b[38;5;245mAlias for list action \u001b[32m \u001b[1m\u001b[33mlog_resources_fully \u001b[0m\u001b[31m\u001b[49mFalse \u001b[38;5;245mAlways output all settings of resources when logging \u001b[32mm \u001b[1m\u001b[33mresource_match \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mProvide a match string for actions. Examples: -irm \"redis, hub\" or -irm '!mysql, !redis' (! negates). \u001b[32ms \u001b[1m\u001b[33msystem \u001b[0m\u001b[31m\u001b[49m'' \u001b[38;5;245mSet to a server for system mode API (e.g. lc hub(s)) \u001b[36m-hf [match string]\u001b[39m: List \u001b[1m\u001b[36mALL\u001b[0m\u001b[39m\u001b[49m (matching) flags. E.g. -hf or -hf log. More CLI flags More control flags are only accessible via --helpfull <match> ( -hf ): Try ops p -hf log_level , ops p -hf port (...) Project initialization flags In the example above, a --port_offset=2000 flag was given, determining the start parameters written into the redis wrapper: $ bin/redis-server bin/redis-server: line 35 : MC: command not found 4103 :C 25 Jul 2023 16 :06:25.162 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 4103 :C 25 Jul 2023 16 :06:25.162 # Redis version=7.0.12, bits=64, commit=22906652, modified=1, pid=4103, just started 4103 :C 25 Jul 2023 16 :06:25.162 # Configuration loaded 4103 :M 25 Jul 2023 16 :06:25.163 * monotonic clock: POSIX clock_gettime _._ _.- `` __ '' -._ _.- `` ` . ` _. '' -._ Redis 7 .0.12 ( 22906652 /1 ) 64 bit .- `` .- ``` . ``` \\/ _.,_ '' -._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|' ` _.- '| Port: 8379 | `-._ `._ / _.-' | PID: 4103 ` -._ ` -._ ` -./ _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | https://redis.io `-._ `-._`-.__.-' _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | `-._ `-._`-.__.-' _.- ' _.-' ` -._ ` -.__.- ' _.-' ` -._ _.- ' `-.__.-' 4103 :M 25 Jul 2023 16 :06:25.163 # Server initialized 4103 :M 25 Jul 2023 16 :06:25.163 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect. 4103 :M 25 Jul 2023 16 :06:25.164 # WARNING You have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled (set to 'madvise' or 'never'). 4103 :M 25 Jul 2023 16 :06:25.164 * Ready to accept connections Idempotency If you need to re-parametrize the project (e.g. set different port offsets) then run ops project --init_at again and have new start wrappers created.","title":"Project Init"},{"location":"projects/usage/#unit-files","text":"We do not try to manage the live cycle of services but leave that to systemd (available on all Linux major distributions). The --init_create_unit_files=<name of daemon resource> will create a unit file after installing the resource itself: Creating a resource incl. unit file Cmd Output $ ops project --init_at = . --init_create_unit_files = redis-server --force $ ops project --init_at=. --init_create_unit_files=redis-server --force \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Directories [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mconda_prefix\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mfs_dir\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/miniconda3/fs(default) \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] verify_systemctl_availability [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0m\u001b[39m\u001b[49msystemctl is /usr/bin/systemctl \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[1m\u001b[38;5;124mwarning \u001b[0m\u001b[39m\u001b[49m] Installing resources [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mresources\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m[{'bin_name': 'lc_tools', 'conda_chan': 'conda-forge', 'conda_pkg': 'git fzf jq ripgrep fd-find httpie htop tmux', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools', 'path': '/home/runner/miniconda3/envs/lc_tools/bin', 'provides': ['git', 'fzf', 'jq', 'rg', 'fd', 'http', 'htop', 'tmux'], 'run': 'lc_tools', 'verify_present': 'verify_tools'}, {'bin_name': 'lc_tools_kf', 'conda_chan': 'kalefranz', 'conda_pkg': 'httpd', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/lc_tools_kf', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'lc_tools_kf', 'path': '/home/runner/miniconda3/envs/lc_tools_kf/bin', 'provides': ['rotatelogs'], 'verify_present': 'verify_tools'}, {'bin_name': 'redis_server', 'cmd': 'redis-server', 'disabled': False, 'doc': '', 'host_conf_dir': '$PROJECT_ROOT/conf/${host:-$HOSTNAME}/redis_server', 'installed': True, 'module': 'devapp', 'module_dir': '/home/runner/work/devapps/devapps/src/devapp', 'name': 'redis_server', 'path': '/home/runner/miniconda3/envs/redis_server/bin', 'pkg': 'redis-server', 'port': 6379, 'provides': ['redis-server', 'redis-cli'], 'run': 'redis_server', 'systemd': 'redis-server'}] \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] create_project_dirs [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] chdir [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32margs\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/myproject\u001b[0m\u001b[39m\u001b[49m \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] have written unit file [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mfn\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/.config/systemd/user/redis-server-myproject.service \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] have written unit file [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mfn\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11m/home/runner/.config/systemd/user/redis-server-myproject.service \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] git_init [\u001b[38;5;5mproject\u001b[39m] \u001b[1m\u001b[32mstore_log\u001b[0m\u001b[39m\u001b[49m=\u001b[1m\u001b[38;5;11mNone \u001b[0;2m\u001b[38;5;5m\u001b[49m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] All project file created. [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Enabling systemd user service units. [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] systemd --user available, calling daemon-reload [\u001b[38;5;5mproject\u001b[39m] \u001b[2m\u001b[38;5;5m07-25 16:06:26\u001b[0m\u001b[39m\u001b[49m [\u001b[38;5;2minfo \u001b[39m] Done init. [\u001b[38;5;5mproject\u001b[39m] You control the service using systemctl --user : Cmd Output $ systemctl --user --no-pager start redis-server-myproject $ systemctl --user --no-pager status redis-server-myproject $ systemctl --user --no-pager stop redis-server-myproject $ systemctl --user --no-pager start redis-server-myproject $ systemctl --user --no-pager status redis-server-myproject \u001b[1m\u001b[32m\u25cf\u001b[0m\u001b[39m\u001b[49m redis-server-myproject.service - redis-server myproject redis-server Loaded: loaded (/home/runner/.config/systemd/user/redis-server-myproject.service; disabled; vendor preset: enabled) Active: \u001b[1m\u001b[32mactive (running)\u001b[0m\u001b[39m\u001b[49m since Tue 2023-07-25 16:06:26 UTC; 36ms ago Main PID: 4150 (bash) Tasks: 6 (limit: 8307) Memory: 7.9M CPU: 9ms CGroup: /user.slice/user-1001.slice/user@1001.service/app.slice/redis-server-myproject.service \u251c\u25004150 bash /home/runner/myproject/bin/redis-server \u2514\u25004152 \"redis-server *:6379\" \"\" \"\" \"\" \"\" \"\" Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u202679. Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026zed Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:26.4\u2026 Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:26.4\u2026 Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026.12 Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026nds Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026 Mb Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026 0. Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026nds Jul 25 16:06:26 fv-az1030-910 redis-server[4152]: 4152:M 25 Jul 2023 16:06:2\u2026ons Hint: Some lines were ellipsized, use -l to show in full. $ systemctl --user --no-pager stop redis-server-myproject Hint In order to install unit files for ALL service type resources, you can supply --init_create_all_units , alternatively. Technically project is implemented as a plugin of the ops tool. \u21a9 typeof start_lc === \"undefined\" ? 0 : start_lc()","title":"Unit Files"}]}